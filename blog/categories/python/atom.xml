<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/python/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/python/"/>
  <updated>2018-09-04T00:02:39-07:00</updated>
  <id>http://tdongsi.github.io/python/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python 3 Quick Recap]]></title>
    <link href="http://tdongsi.github.io/python/blog/2017/08/13/python-3-quick-recap/"/>
    <updated>2017-08-13T23:49:57-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2017/08/13/python-3-quick-recap</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Requests Cookbook]]></title>
    <link href="http://tdongsi.github.io/python/blog/2017/08/06/requests-cookbook/"/>
    <updated>2017-08-06T23:17:25-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2017/08/06/requests-cookbook</id>
    <content type="html"><![CDATA[<p><code>requests</code> module is a simple HTTP client library in Python.</p>

<!-- more -->


<h3>Example: BART parking</h3>

<p>The problem is discussed <a href="http://tdongsi.github.io/blog/2016/10/30/automated-downloading-bart-parking-permits/">here</a>.
The <code>requests</code>&rsquo;s code snippets can be found <a href="https://github.com/tdongsi/bart-parking/blob/develop/python/bart.py">here</a>.</p>

<p>Featuring:</p>

<ul>
<li>Login with CSRF protection (with POST)</li>
<li>Cookie retrieval and usage</li>
<li>Binary download and saved to file.</li>
</ul>


<pre><code class="python Different payload for POST"># POST /bart/users/login/ HTTP/1.1
# Content-Type: application/x-www-form-urlencoded
HEADERS = {"Referer": "https://www.select-a-spot.com/bart/"}
params = {"username": username,
            "password": password,
            "csrfmiddlewaretoken": r.cookies["csrftoken"],
            "login": "Login"}
r = s.post("https://www.select-a-spot.com/bart/users/login/", headers=HEADERS, data=params, allow_redirects=False)

# POST /kafka/topic HTTP/1.1
# Content-Type: application/json
my_data = {'name': IOT_TOPIC, 'type': '/types/com.prod.emp'}
my_header = {'Accept': 'application/json', 'Content-Type': 'application/json'}

logger.info('POST: %s', TOPIC_ENDPOINT)
r = s.post(TOPIC_ENDPOINT, headers=my_header, data=json.dumps(my_data), cert=KAFKA_CERTS)
</code></pre>

<p>Note that <code>json.dumps</code> is required for POST-ing JSON data. The typical service response:</p>

<pre><code class="plain Error message">"exception":"org.springframework.http.converter.HttpMessageNotReadableException","message":"Bad Request"
</code></pre>

<h3>SSL authentication</h3>

<p>You can specify your certificate and private key in <code>cert=(my_cert, my_key)</code> as a method parameter.
The certificate authority can be optionally specified (<code>s.verify = MY_CA</code>) or not (<code>s.verify = False</code>).</p>

<pre><code class="python SSL authentication">def test_kafka(my_cert, my_key):
    """ Top level function to test_kafka.

    :param my_cert: path to certificate.
    :param my_key: path to private key corresponding to the certificate.
    :return:
    """

    ZOOKEEPER_EP = 'https://kafka-prd.corp.net:9090'
    IOT_NAMESPACE = 'test'
    MY_CA = 'download/ca.crt'

    s = requests.Session()
    s.verify = MY_CA

    def test_namespace():
        """ Test querying kafka namespace.

        Basically: curl -k -E ./kafka.p12:password "https://kafka.prd:9090/namespaces/test"
        """
        NAMESPACE_PATH = '/namespaces'
        endpoint = ZOOKEEPER_EP + NAMESPACE_PATH + '/' + IOT_NAMESPACE

        logger.info('GET: %s', endpoint)
        r = s.get(endpoint, cert=(my_cert, my_key))

        logger.debug("Response: %s", r.text)
        data = json.loads(r.text)
        # print json.dumps(data, indent=4)
        # Print namespace
        logger.info("ID: %s", data['id'])
        pass

    test_namespace()
</code></pre>

<h3>Unit testing</h3>

<p>You can do unit testing by using <code>requests-mock</code> package.</p>

<pre><code class="plain Installation"># Only required for Python 2. Mock is part of Python 3.
pip install -U mock

pip install requests-mock
</code></pre>

<pre><code class="python Example of mocking">    @requests_mock.mock()    
    def test_get_env_status(self, m):
        #Test status code 400 returns False
        m.get(self.status_endpoint, status_code=404)
        with mock.patch.dict(os.environ,{'username':'mytempuser', 'password':'temppass'}):
            self.assertEquals(FlowSnakeEnvironment.get_env_status(self.fsenv_name), None)
</code></pre>

<h4>References</h4>

<ul>
<li><a href="https://media.readthedocs.org/pdf/requests-mock/latest/requests-mock.pdf">PDF doc</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Protocols]]></title>
    <link href="http://tdongsi.github.io/python/blog/2016/09/05/tutorial-protocols/"/>
    <updated>2016-09-05T23:50:24-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2016/09/05/tutorial-protocols</id>
    <content type="html"><![CDATA[<p>Python uses &ldquo;duck typing&rdquo;.
It does not have interfaces like Java to enforce certain behaviors:
<code>Iterable</code> iterface means that you can iterate an object of that class in a <code>for each</code> loop.
In Python, to do that, you have to override magic functions like <code>__iter__</code> to achieve some behaviors.
Each behavior is called &ldquo;protocol&rdquo; in this post since some involves overriding multiple magic funtions.</p>

<!-- Reference:
Evernote: "OOP in Python"
-->




<!--more-->


<h3>Iterator</h3>

<p>Here, <code>__iter__</code> just returns self, an object that has the function next(), which (when called) either returns a value or raises a StopIteration exception.
We’ve actually already met several iterators in disguise; in particular, <code>enumerate</code> is an iterator.
To drive home the point, here’s a simple reimplementation of <code>enumerate</code>:</p>

<pre><code class="python Implement enumerator() as iterator">&gt;&gt;&gt; class my_enumerate:
...   def __init__(self, some_iter):
...      self.some_iter = iter(some_iter)
...      self.count = -1
...
...   def __iter__(self):
...      return self
...
...   def next(self):
...      val = self.some_iter.next()
...      self.count += 1
...      return self.count, val
&gt;&gt;&gt; for n, val in my_enumerate(['a', 'b', 'c']):
...   print n, val
0 a
1 b
2 c
</code></pre>

<h4>Generator and Iterator protocol</h4>

<p>It is also much easier to write routines like enumerate as a generator than as an iterator:</p>

<pre><code class="python Implement enumerate() using generator">&gt;&gt;&gt; def gen_enumerate(some_iter):
...   count = 0
...   for val in some_iter:
...      yield count, val
...      count += 1
</code></pre>

<p>But you can do things with generators that you couldn’t do with finite lists.
Consider two full implementation of Eratosthenes’ Sieve for finding prime numbers.
Full discussion is <a href="http://intermediate-and-advanced-software-carpentry.readthedocs.io/en/latest/idiomatic-python.html">here</a>.
Most of these are from &ldquo;Python tutorial&rdquo;.</p>

<h3>Container</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 2 Quick Recap]]></title>
    <link href="http://tdongsi.github.io/python/blog/2016/07/02/python-quick-recap/"/>
    <updated>2016-07-02T00:23:27-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2016/07/02/python-quick-recap</id>
    <content type="html"><![CDATA[<p>What to review before a Python interview.
This blog post focuses on Python 2.7.
Python 3 should be discussed in another blog post.</p>

<!--more-->


<h3>Basic</h3>

<ol>
<li><a href="https://docs.python.org/2.7/tutorial/">Python tutorial</a>: especially <a href="https://docs.python.org/2.7/tutorial/classes.html">&ldquo;Classes&rdquo;</a> and two <a href="https://docs.python.org/2.7/tutorial/stdlib.html">&ldquo;Brief Tour of Standard Library&rdquo;</a> sections.</li>
<li><a href="https://pyformat.info/">String format</a> if you expect lots of string processing.</li>
<li><a href="/blog/2016/09/05/tutorial-protocols/">Protocols</a>.</li>
</ol>


<h3>Python decorator</h3>

<p>Python decorator is a callable that takes a function as argument and returns a replacement function.</p>

<pre><code class="python Example decorator">&gt;&gt;&gt; def outer(some_func):
...     def inner():
...         print "before some_func"
...         ret = some_func() # 1
...         return ret + 1
...     return inner
&gt;&gt;&gt; def foo():
...     return 1
&gt;&gt;&gt; decorated = outer(foo) # 2
&gt;&gt;&gt; decorated()
before some_func
2
</code></pre>

<p>Python 2.4 provided support to wrap a function in a decorator by pre-pending the function definition with a decorator name and the @ symbol.</p>

<pre><code class="python A generic decorator">&gt;&gt;&gt; def logger(func):
...     def inner(*args, **kwargs): #1
...         print "Arguments were: %s, %s" % (args, kwargs)
...         return func(*args, **kwargs) #2
...     return inner

&gt;&gt;&gt; @logger
... def foo1(x, y=1):
...     return x * y
</code></pre>

<p>Note that decorators implemented as functions above are stateless.
For stateful decorators (e.g., counter), they should be implemented as a class (see <a href="http://scottlobdell.me/2015/04/decorators-arguments-python/">here</a>).</p>

<h4>Reference</h4>

<p>RECOMMENDED:</p>

<ul>
<li><a href="http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/">Decorator tutorial</a></li>
<li><a href="http://scottlobdell.me/2015/04/decorators-arguments-python/">Decorator with arguments</a></li>
</ul>


<p>EXTRA READING:</p>

<ul>
<li><a href="https://github.com/yihtserns/groovy-decorator">Python-inspired decorator in Groovy</a></li>
<li><a href="https://wiki.python.org/moin/PythonDecoratorLibrary">Decorator library</a></li>
</ul>


<h3>Python generator</h3>
]]></content>
  </entry>
  
</feed>
