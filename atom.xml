<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/python/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/python/"/>
  <updated>2019-04-01T00:01:51-07:00</updated>
  <id>http://tdongsi.github.io/python/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Mock Recipes]]></title>
    <link href="http://tdongsi.github.io/python/blog/2019/03/31/python-mock-recipes/"/>
    <updated>2019-03-31T22:49:05-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2019/03/31/python-mock-recipes</id>
    <content type="html"><![CDATA[<p>Recipes for mocking with <code>unittest.mock</code> module when writing unit tests in Python.</p>

<!--more-->


<h3>Mock simple HTTP responses</h3>

<p>When testing REST clients that use <code>requests</code> module, it is better to use this utility method to construct mock HTTP responses.</p>

<figure class='code'><figcaption><span>Utility method to create mock response</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">create_mock_response</span><span class="p">(</span><span class="n">status</span><span class="o">=</span><span class="mi">200</span><span class="p">,</span> <span class="n">content</span><span class="o">=</span><span class="s">&quot;{}&quot;</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Create mock HTTTP responses for &quot;requests&quot; module.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param status: override Response.status_code. Example: 200</span>
</span><span class='line'><span class="sd">    :param content: override Response.text and Response.content.</span>
</span><span class='line'><span class="sd">    :return: mock response object</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">mock_response</span> <span class="o">=</span> <span class="n">mock</span><span class="o">.</span><span class="n">Mock</span><span class="p">()</span>
</span><span class='line'>    <span class="n">mock_response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">=</span> <span class="n">status</span>
</span><span class='line'>    <span class="n">mock_response</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">content</span>
</span><span class='line'>    <span class="n">mock_response</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">content</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">mock_response</span>
</span></code></pre></td></tr></table></div></figure>


<p>By mocking HTTP (usually GET) responses, you can validate the REST client&rsquo;s behavior for a certain response.
This is useful as we can reproduce exceptional, failure scenarios such as those with 4xx error codes.</p>

<figure class='code'><figcaption><span>Example test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@mock.patch</span><span class="p">(</span><span class="s">&#39;requests.get&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">test_get_deployments_429</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mock_get</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Failure case. &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="c"># Mock response</span>
</span><span class='line'>    <span class="n">mock_text</span> <span class="o">=</span> <span class="s">u&#39;{&quot;reponse&quot;: &quot;Slow down.&quot;}&#39;</span>
</span><span class='line'>    <span class="n">mock_response</span> <span class="o">=</span> <span class="n">base</span><span class="o">.</span><span class="n">create_mock_response</span><span class="p">(</span><span class="n">status</span><span class="o">=</span><span class="mi">429</span><span class="p">,</span> <span class="n">content</span><span class="o">=</span><span class="n">mock_text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mock_get</span><span class="o">.</span><span class="n">return_value</span> <span class="o">=</span> <span class="n">mock_response</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># REST client&#39;s function that sends GET request here</span>
</span><span class='line'>    <span class="c"># ...</span>
</span><span class='line'>    <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">assertRaises</span><span class="p">(</span><span class="n">ResponseRateException</span><span class="p">)</span> <span class="k">as</span> <span class="n">bg</span><span class="p">:</span>
</span><span class='line'>        <span class="n">method_under_test</span><span class="p">(</span><span class="o">**</span><span class="n">arguments</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="s">&#39;request not accepted&#39;</span> <span class="ow">in</span> <span class="n">bg</span><span class="o">.</span><span class="n">exception</span><span class="o">.</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Redirect <code>stdout</code> output to variable for validation</h3>

<p>Some legacy codes tend to spam <code>print</code> statements and you probably need to check if the output is correct.
In that case, we can redirect <code>print</code>&rsquo;s output to some variable and assert the value of that string variable.</p>

<p>There is a popular but complex way to redirect <code>stdout</code> to a string variable, thanks to being the <a href="https://stackoverflow.com/questions/1218933/can-i-redirect-the-stdout-in-python-into-some-sort-of-string-buffer">top and accepted answer on Stackoverflow</a>.</p>

<figure class='code'><figcaption><span>Complex way</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">StringIO</span> <span class="kn">import</span> <span class="n">StringIO</span>  <span class="c"># Python2</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">io</span> <span class="kn">import</span> <span class="n">StringIO</span>  <span class="c"># Python3</span>
</span><span class='line'>
</span><span class='line'> <span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Store the reference for restoring</span>
</span><span class='line'>
</span><span class='line'><span class="n">old_stdout</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This variable will store everything that is sent to the standard output</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">StringIO</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">call_method_under_test</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Redirect again the std output to screen</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">old_stdout</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Then, get the stdout like a string</span>
</span><span class='line'><span class="n">result_string</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="n">expected_output</span><span class="p">,</span> <span class="n">result_string</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the context of unit testing, to ensure that all unit tests are indepedenent, you have to set and reset <code>sys.stdout</code> in each unit test separately.
As a result, it is very inconvenient when you may have hundreds of unit tests and only tens of them need that output redirection for validation.
Instead, <code>mock</code> module makes it easy as follows:</p>

<figure class='code'><figcaption><span>Mock print statements</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="c"># Mock sys.stdout to redirect &quot;print&quot;&#39;s output to a variable mock_stdout</span>
</span><span class='line'>    <span class="k">with</span> <span class="n">mock</span><span class="o">.</span><span class="n">patch</span><span class="p">(</span><span class="s">&#39;sys.stdout&#39;</span><span class="p">,</span> <span class="n">new_callable</span><span class="o">=</span><span class="n">StringIO</span><span class="p">)</span> <span class="k">as</span> <span class="n">mock_stdout</span><span class="p">:</span>
</span><span class='line'>        <span class="n">method_under_test</span><span class="p">(</span><span class="o">**</span><span class="n">arguments</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># result_string is what method_under_test print out</span>
</span><span class='line'>        <span class="n">result_string</span> <span class="o">=</span> <span class="n">mock_stdout</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()</span>
</span><span class='line'>        <span class="c"># Compare two objects from two JSON strings</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">expected_output</span><span class="p">,</span> <span class="n">result_string</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Skip waiting when testing</h3>

<p>Many methods under test need to sleep and wait for a certain amount of time before proceeding to its next stage.
If the external components (e.g., HTTP responses) are already mocked out, such waiting maybe not necessary and we&rsquo;d like to skip the waiting part.
Using <code>mock.patch</code>, it is easy to mock out <code>time.sleep</code> to skip such waiting parts.</p>

<figure class='code'><figcaption><span>Skip waiting</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="c"># Mock time.sleep to skip sleeping</span>
</span><span class='line'>    <span class="k">with</span> <span class="n">mock</span><span class="o">.</span><span class="n">patch</span><span class="p">(</span><span class="s">&#39;time.sleep&#39;</span><span class="p">,</span> <span class="n">return_value</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># Mock sys.stdout to redirect &quot;print&quot; statement&#39;s output to a variable mock_stdout</span>
</span><span class='line'>        <span class="k">with</span> <span class="n">mock</span><span class="o">.</span><span class="n">patch</span><span class="p">(</span><span class="s">&#39;sys.stdout&#39;</span><span class="p">,</span> <span class="n">new_callable</span><span class="o">=</span><span class="n">StringIO</span><span class="p">)</span> <span class="k">as</span> <span class="n">mock_stdout</span><span class="p">:</span>
</span><span class='line'>            <span class="n">execute_long_running</span><span class="p">(</span><span class="mf">0.25</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># result_string is what _execute_canary_deployment prints out</span>
</span><span class='line'>        <span class="n">result_string</span> <span class="o">=</span> <span class="n">mock_stdout</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="s">&#39;expected string&#39;</span> <span class="ow">in</span> <span class="n">result_string</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Python Pt. 6: Robust Programs]]></title>
    <link href="http://tdongsi.github.io/python/blog/2018/12/16/effective-python-part-6/"/>
    <updated>2018-12-16T17:58:58-08:00</updated>
    <id>http://tdongsi.github.io/python/blog/2018/12/16/effective-python-part-6</id>
    <content type="html"><![CDATA[<p>This post corresponds to Lesson 6 &ldquo;Making Programs Robust&rdquo; of <a href="https://www.safaribooksonline.com/videos/effective-python/9780134175249">&ldquo;Effective Python&rdquo; course</a>.</p>

<p>NOTE: While the book is about Python 3, my blog checks out its application in Python 2.</p>

<!--more-->


<h3>Item 28: Use virtualenv</h3>

<p>Use <code>pip</code> commands for virtual environment management.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>$ pip show flask
</span><span class='line'>Name: Flask
</span><span class='line'>Version: 1.0.2
</span><span class='line'>Summary: A simple framework for building complex web applications.
</span><span class='line'>Home-page: https://www.palletsprojects.com/p/flask/
</span><span class='line'>Author: Armin Ronacher
</span><span class='line'>Author-email: armin.ronacher@active-4.com
</span><span class='line'>License: BSD
</span><span class='line'>Location: /Users/tdongsi/Matrix/python/venv/lib/python2.7/site-packages
</span><span class='line'>Requires: Werkzeug, click, Jinja2, itsdangerous
</span><span class='line'>Required-by:
</span><span class='line'>
</span><span class='line'>$ pip install --upgrade Jinja2
</span><span class='line'>Requirement already up-to-date: Jinja2 in ./venv/lib/python2.7/site-packages (2.10)
</span><span class='line'>Requirement already satisfied, skipping upgrade: MarkupSafe&gt;=0.23 in ./venv/lib/python2.7/site-packages (from Jinja2) (1.1.0)
</span><span class='line'>
</span><span class='line'>$ pip list
</span><span class='line'>Package                  Version
</span><span class='line'>------------------------ ----------
</span><span class='line'>alabaster                0.7.12
</span><span class='line'>Babel                    2.6.0
</span><span class='line'>certifi                  2018.11.29
</span><span class='line'>chardet                  3.0.4
</span><span class='line'>Click                    7.0
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>$ pip freeze
</span><span class='line'>alabaster==0.7.12
</span><span class='line'>Babel==2.6.0
</span><span class='line'>certifi==2018.11.29
</span><span class='line'>chardet==3.0.4
</span><span class='line'>Click==7.0
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>$ pip freeze &gt; requirements.txt
</span><span class='line'>
</span><span class='line'># In another virtualenv
</span><span class='line'>$ pip install -r requirements.txt</span></code></pre></td></tr></table></div></figure>


<p>Set up and use virtual environment in Python 2.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'># Create new virtual env
</span><span class='line'>$ virtualenv venv
</span><span class='line'>New python executable in /Users/tdongsi/Matrix/python/venv/bin/python
</span><span class='line'>Installing setuptools, pip, wheel...
</span><span class='line'>done.
</span><span class='line'>
</span><span class='line'># Activate new virual env
</span><span class='line'>$ source venv/bin/activate
</span><span class='line'>
</span><span class='line'>$ deactivate</span></code></pre></td></tr></table></div></figure>


<h4>Python 3</h4>

<p>The difference in Python 3 is the dedicated command <code>pyvenv</code> and no separate installation of <code>virtualenv</code> is required.</p>

<figure class='code'><figcaption><span>virtualenv in Python 3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pyvenv -h
</span><span class='line'>
</span><span class='line'># Create new virtual env
</span><span class='line'>$ pyvenv myproject
</span><span class='line'>
</span><span class='line'># Activate new virual env
</span><span class='line'>$ source myproject/bin/activate
</span><span class='line'>
</span><span class='line'>$ deactivate</span></code></pre></td></tr></table></div></figure>


<h3>Item 29: Tests with unittest</h3>

<p>Tests are even more important in Python (than Java) since it is a dynamic language.
<code>unittest</code> module can be used for both unit tests (isolated tests) and functional/integration tests (verifying interactions).</p>

<figure class='code'><figcaption><span>unittest examples</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">unittest</span> <span class="kn">import</span> <span class="n">TestCase</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ExampleTest</span><span class="p">(</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Setup&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">tearDown</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Teardown&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_a</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_b</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">unittest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Item 30: Debugging with <code>pdb</code></h3>

<figure class='code'><figcaption><span>Use debugger</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Code before</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">pdb</span><span class="p">;</span> <span class="n">pdb</span><span class="o">.</span><span class="n">set_trace</span><span class="p">()</span>
</span><span class='line'><span class="c"># Code after</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few debugger commands when you are already in the debugger:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>next
</span><span class='line'>step
</span><span class='line'>locals()
</span><span class='line'>bt  # back trace
</span><span class='line'>up
</span><span class='line'>down</span></code></pre></td></tr></table></div></figure>


<p>The Python debugger <code>pdb</code> is very similar to C debugger in Linux.
However, you are probably better off with debugger in proper IDEs such as PyCharm with better visualization.</p>

<h3>Iten 31: Profile before optimizing</h3>

<p>In summary, how to do CPU profiling in Python.</p>

<p>Dynamic nature of Python programs can lead to surprising performance impact.
Profiling is easy to do in Python with built-in modules, as shown below, and allows us to focus on measurable sources of performance bottlenecks.</p>

<figure class='code'><figcaption><span>Profiling in Python</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">cProfile</span> <span class="kn">import</span> <span class="n">Profile</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pstats</span> <span class="kn">import</span> <span class="n">Stats</span>
</span><span class='line'>
</span><span class='line'><span class="n">profiler</span> <span class="o">=</span> <span class="n">Profile</span><span class="p">()</span>
</span><span class='line'><span class="c"># profiler.runcall(insertion_sort, data)</span>
</span><span class='line'><span class="n">profiler</span><span class="o">.</span><span class="n">runcall</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="n">insertion_sort</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">stats</span> <span class="o">=</span> <span class="n">Stats</span><span class="p">(</span><span class="n">profiler</span><span class="p">)</span>
</span><span class='line'><span class="n">stats</span><span class="o">.</span><span class="n">strip_dirs</span><span class="p">()</span>
</span><span class='line'><span class="n">stats</span><span class="o">.</span><span class="n">sort_stats</span><span class="p">(</span><span class="s">&#39;cumulative&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">stats</span><span class="o">.</span><span class="n">print_stats</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Profiler output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>     20003 function calls in 0.791 seconds
</span><span class='line'>
</span><span class='line'>   Ordered by: cumulative time
</span><span class='line'>
</span><span class='line'>   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
</span><span class='line'>    1    0.000    0.000    0.791    0.791 item31.py:27(&lt;lambda&gt;)
</span><span class='line'>    1    0.002    0.002    0.791    0.791 item31.py:7(insertion_sort)
</span><span class='line'>10000    0.780    0.000    0.789    0.000 item31.py:14(insert_value)
</span><span class='line'> 9989    0.010    0.000    0.010    0.000 {method 'insert' of 'list' objects}
</span><span class='line'>   11    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
</span><span class='line'>    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}</span></code></pre></td></tr></table></div></figure>


<p>Another print method <code>stats.print_callers()</code> can reorganize the same information in a different way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   Ordered by: cumulative time
</span><span class='line'>
</span><span class='line'>Function                                          was called by...
</span><span class='line'>                                                      ncalls  tottime  cumtime
</span><span class='line'>item31.py:25(&lt;lambda&gt;)                            &lt;-
</span><span class='line'>item31.py:8(insertion_sort)                       &lt;-       1    0.002    0.023  item31.py:25(&lt;lambda&gt;)
</span><span class='line'>item31.py:15(insert_value)                        &lt;-   10000    0.004    0.021  item31.py:8(insertion_sort)
</span><span class='line'>{method 'insert' of 'list' objects}               &lt;-   10000    0.011    0.011  item31.py:15(insert_value)
</span><span class='line'>{_bisect.bisect_left}                             &lt;-   10000    0.006    0.006  item31.py:15(insert_value)
</span><span class='line'>{method 'disable' of '_lsprof.Profiler' objects}  &lt;-</span></code></pre></td></tr></table></div></figure>


<p>More details can be found in <a href="https://docs.python.org/2/library/profile.html">Python documentation</a>.</p>

<h3>Item 32: Use tracemalloc to undertand memory usage and leaks</h3>

<p>In summary, this item is about how to do memory profiling in Python.</p>

<p>Python has automatic garbage collection: reference counting and cycle detection for looping references.
Despite that, memory leaks still happen and it&rsquo;s hard in practice to figure out why references are held.</p>

<figure class='code'><figcaption><span>gc module</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">gc</span>
</span><span class='line'>
</span><span class='line'><span class="n">found_objects</span> <span class="o">=</span> <span class="n">gc</span><span class="o">.</span><span class="n">get_objects</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%d</span><span class="s"> objects before&#39;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">found_objects</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">waste_memory</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">waste_memory</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">found_objects</span> <span class="o">=</span> <span class="n">gc</span><span class="o">.</span><span class="n">get_objects</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%d</span><span class="s"> objects after&#39;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">found_objects</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>gc</code> module allows you to interact with garbage collectors and take a look into how many objects created, as shown above.
However, such information is usually not enough to figure out what went wrong: objects of the same class can be created in various ways.
You need more information to figure out where the allocation and the memory leak happens.</p>

<p>In Python 3, we have <code>tracemalloc</code> module that allows comparing between two memory snapshots and trace back to the code lines where such memory allocations happen.
See <a href="https://pytracemalloc.readthedocs.io/examples.html">more examples</a>.
For Python 2.7, it is not part of the Standard Library.
Therefore, we have to patch and compile Python 2.7 to use the 3rd party <code>pytracemalloc</code> module.
The instructions to do it can be found in <a href="http://carsonip.me/posts/debugging-memory-usage-python-tracemalloc/">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Python Pt. 5: Concurrency and Parallelism]]></title>
    <link href="http://tdongsi.github.io/python/blog/2018/08/18/effective-python-pt-5-concurrency-and-parallelism/"/>
    <updated>2018-08-18T16:24:30-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2018/08/18/effective-python-pt-5-concurrency-and-parallelism</id>
    <content type="html"><![CDATA[<p>This post corresponds to Lesson 5 &ldquo;Concurrency and Parallelism&rdquo; of <a href="https://www.safaribooksonline.com/videos/effective-python/9780134175249">&ldquo;Effective Python&rdquo; course</a>.</p>

<!--more-->


<h3>Item 23: Use subprocess to manage child processes</h3>

<figure class='code'><figcaption><span>Typical usage of subprocess module</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'>
</span><span class='line'><span class="n">proc</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span>
</span><span class='line'>    <span class="p">[</span><span class="s">&#39;echo&#39;</span><span class="p">,</span> <span class="s">&#39;Hello World&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">proc</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">out</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Simple forking example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">proc</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s">&#39;sleep&#39;</span><span class="p">,</span> <span class="s">&#39;0.3&#39;</span><span class="p">])</span>
</span><span class='line'><span class="k">while</span> <span class="n">proc</span><span class="o">.</span><span class="n">poll</span><span class="p">()</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;Working...&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># Time consuming process</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;Exit status: </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">proc</span><span class="o">.</span><span class="n">poll</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the forking example above, note that <code>proce.poll()</code> is used to check for and obtain the status of the child process.</p>

<figure class='code'><figcaption><span>Parallelism wtih subprocess</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">run_sleep</span><span class="p">(</span><span class="n">period</span><span class="p">):</span>
</span><span class='line'>    <span class="n">proc</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s">&#39;sleep&#39;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">period</span><span class="p">)])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">proc</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'><span class="n">procs</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'>    <span class="n">proc</span> <span class="o">=</span> <span class="n">run_sleep</span><span class="p">(</span><span class="mf">0.3</span><span class="p">)</span>
</span><span class='line'>    <span class="n">procs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">proc</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">proc</span> <span class="ow">in</span> <span class="n">procs</span><span class="p">:</span>
</span><span class='line'>    <span class="n">proc</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;Takes </span><span class="si">%f</span><span class="s"> seconds&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the parallisim example above, the time it takes is approximately 0.3 seconds, no matter how many processes you create.</p>

<figure class='code'><figcaption><span>Piping data from Python data to subprocess</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># You can pipe data from Python program to subprocess</span>
</span><span class='line'><span class="c"># In this way, you can call other programs to run in parallel with Python process.</span>
</span><span class='line'><span class="c"># Run sub-processes on multiple CPUs.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">run_openssl</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;A computing-intensive method, best for running separately on separate CPUs.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">env</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>    <span class="n">env</span><span class="p">[</span><span class="s">&#39;password&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;asdf&#39;</span>
</span><span class='line'>    <span class="n">proc</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span>
</span><span class='line'>        <span class="p">[</span><span class="s">&#39;openssl&#39;</span><span class="p">,</span> <span class="s">&#39;enc&#39;</span><span class="p">,</span> <span class="s">&#39;-des3&#39;</span><span class="p">,</span> <span class="s">&#39;-pass&#39;</span><span class="p">,</span> <span class="s">&#39;env:password&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="n">env</span><span class="o">=</span><span class="n">env</span><span class="p">,</span>
</span><span class='line'>        <span class="n">stdin</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span>
</span><span class='line'>        <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">proc</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="n">proc</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">proc</span>
</span><span class='line'>
</span><span class='line'><span class="n">procs</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">urandom</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>    <span class="n">proc</span> <span class="o">=</span> <span class="n">run_openssl</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="n">procs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">proc</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">proc</span> <span class="ow">in</span> <span class="n">procs</span><span class="p">:</span>
</span><span class='line'>    <span class="n">out</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">proc</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that in this piping example above, you can use <code>os.environ.copy</code> to shield current process&rsquo;s environment from modifications of its variables.
You can use the new copy of environment by specifying <code>env=my_env</code> in <code>Popen</code> constructor.
In addition, you can use the environment variable as parameters in the <code>Popen</code> command by using <code>env:password</code>.
To pipe data from Python into the subprocess, you need to set <code>stdin=subprocess.PIPE</code> and transfer data by using <code>proc.stdin.write(data)</code>.</p>

<figure class='code'><figcaption><span>Subprocess timeout in Python 3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Python 3 way</span>
</span><span class='line'><span class="n">proc</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s">&#39;sleep&#39;</span><span class="p">,</span> <span class="s">&#39;10&#39;</span><span class="p">])</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">proc</span><span class="o">.</span><span class="n">communicate</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">TimeoutExpired</span><span class="p">:</span>
</span><span class='line'>    <span class="n">proc</span><span class="o">.</span><span class="n">terminate</span><span class="p">()</span>
</span><span class='line'>    <span class="n">proc</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;Exit status&#39;</span><span class="p">,</span> <span class="n">proc</span><span class="o">.</span><span class="n">poll</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s not available in Python 2, and if you want to reproduce its functionality in Python 2, you actually have to use the <code>select</code> module and poll the input and output file descriptors of the subprocess.
It is a little bit more complicated and it&rsquo;s hard to get right.</p>

<figure class='code'><figcaption><span>Stop-gap alternative in Python 2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Command</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Stop-gap alternative for subprocess&#39;s timeout in Python 3.</span>
</span><span class='line'><span class="sd">    Based on https://stackoverflow.com/questions/1191374/using-module-subprocess-with-timeout</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">process</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">process</span> <span class="o">=</span> <span class="n">process</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">timeout</span><span class="p">):</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">target</span><span class="p">():</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">process</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">thread</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">target</span><span class="p">)</span>
</span><span class='line'>        <span class="n">thread</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">thread</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">timeout</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">thread</span><span class="o">.</span><span class="n">is_alive</span><span class="p">():</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;Terminating process&#39;</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">process</span><span class="o">.</span><span class="n">terminate</span><span class="p">()</span>
</span><span class='line'>            <span class="n">thread</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">process</span><span class="o">.</span><span class="n">returncode</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">proc</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s">&#39;sleep&#39;</span><span class="p">,</span> <span class="s">&#39;2&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">command</span> <span class="o">=</span> <span class="n">Command</span><span class="p">(</span><span class="n">proc</span><span class="p">)</span>
</span><span class='line'><span class="n">command</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># NOTE: the following will not work since the subprocess already ran.</span>
</span><span class='line'><span class="c"># command = Command(proc)</span>
</span><span class='line'><span class="n">command</span> <span class="o">=</span> <span class="n">Command</span><span class="p">(</span><span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s">&#39;sleep&#39;</span><span class="p">,</span> <span class="s">&#39;2&#39;</span><span class="p">]))</span>
</span><span class='line'><span class="n">command</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Item 24: Use threads for blocking I/O, NOT for parallelism</h3>

<p>Python has the GIL, or Global Interpreter Lock.
It means that only one Python thread will ever actually run at a time.
A common mistake is to use threads to speed up a computation-intensive program in Python.
You will be usually disappointed and end up with similar, if not worse, performance.
In other words, you might find that your complicated parallel version will have similar performance as the serial one.</p>

<p>In Python, threads are good for two main use cases.
The first use case is, if you want something looks running simultaneously (concurrency).
A common example is to respond to user inputs while doing network I/O.
In this case, the threads will cooperate with each other to obtain GIL fairly.
The second use case for threads in Python is for IO-intensive applications such as those with lots of (blocking) network, system calls.
A common example is to use threads to query multiple REST endpoints concurrently.
The following example illustrate such use case:</p>

<figure class='code'><figcaption><span>Use Python threads for network I/O</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">threading</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_response</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="o">.</span><span class="n">status_code</span><span class="p">,</span> <span class="n">r</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">RequestThread</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">RequestThread</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_url</span> <span class="o">=</span> <span class="n">url</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">output</span> <span class="o">=</span> <span class="n">get_response</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_url</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">urls</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;https://www.google.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://www.facebook.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://www.apple.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://www.netflix.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://www.salesforce.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://www.intuit.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://www.amazon.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://www.uber.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://www.lyft.com&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">threads</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">urls</span><span class="p">:</span>
</span><span class='line'>    <span class="n">thread</span> <span class="o">=</span> <span class="n">RequestThread</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="n">thread</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>    <span class="n">threads</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">thread</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">thread</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
</span><span class='line'>    <span class="n">thread</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>TODO: Explain GIL and under the cover, <code>request</code> release the control of GIL.</p>

<p>TODO: mistake</p>

<p>TODO: Note about how to call constructor.</p>

<h3>Item 26: Use Queue to cordinate work between threads</h3>

<p>Queue as the blocking queue for threads.</p>

<p>ClosableQueue and Woker classes for building pipelines of workers running in parallel and coordination.</p>

<h3>Item 27: concurrent.futures for true parallelism</h3>

<p><code>ProcessPoolExecutor</code> as the high level API to split work into subprocesses.</p>

<p>Explanation of works behind the scene: lots of serialization and deserialization between main process and child processes.</p>

<p>When to use multiprocessing:</p>

<ul>
<li>Isolated: no data sharing.</li>
<li>High leverage: small input data, large computation.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Python Pt. 4: Using Classes]]></title>
    <link href="http://tdongsi.github.io/python/blog/2018/08/12/effective-python-part-4/"/>
    <updated>2018-08-12T00:19:36-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2018/08/12/effective-python-part-4</id>
    <content type="html"><![CDATA[<p>This post corresponds to Lesson 4 &ldquo;Using Classes&rdquo; of <a href="https://www.safaribooksonline.com/videos/effective-python/9780134175249">&ldquo;Effective Python&rdquo; course</a>.</p>

<!--more-->


<h3>Item 19: Prefer helper classes over book-keeping with dict and tuples</h3>

<p>In an example, the author illustrated the progressive evolution of a grade-book application.
In each iteration, the requirements are changed and interfaces are changed to accomodate that.
Consequently, dictionaries and tuples are added to accomodate those changes in implementation but the logic and code becomes so convoluting with all book-keeping with those built-int data structures.
The final version is shown as follows:</p>

<figure class='code'><figcaption><span>Original code with dicts and tuples</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">WeightedGradebook</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Change WeightedGradebook to make the score in each subject is weighted.</span>
</span><span class='line'><span class="sd">    For example, final is more weighted than homework.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_grade</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_student</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_grade</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">report_grade</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">subject</span><span class="p">,</span> <span class="n">score</span><span class="p">,</span> <span class="n">weight</span><span class="p">):</span>
</span><span class='line'>        <span class="n">by_subject</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_grade</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>
</span><span class='line'>        <span class="n">grade_list</span> <span class="o">=</span> <span class="n">by_subject</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="n">subject</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>        <span class="n">grade_list</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">score</span><span class="p">,</span> <span class="n">weight</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">average_grade</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="n">by_subject</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_grade</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>
</span><span class='line'>        <span class="n">total</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">grades</span> <span class="ow">in</span> <span class="n">by_subject</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
</span><span class='line'>            <span class="n">subject_total</span><span class="p">,</span> <span class="n">subject_weight</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">score</span><span class="p">,</span> <span class="n">weight</span> <span class="ow">in</span> <span class="n">grades</span><span class="p">:</span>
</span><span class='line'>                <span class="n">subject_total</span> <span class="o">=</span> <span class="n">score</span> <span class="o">*</span> <span class="n">weight</span>
</span><span class='line'>                <span class="n">subject_weight</span> <span class="o">=</span> <span class="n">weight</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">total</span> <span class="o">+=</span> <span class="n">subject_total</span> <span class="o">/</span> <span class="n">subject_weight</span>
</span><span class='line'>            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">total</span> <span class="o">/</span> <span class="n">count</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main_weighted</span><span class="p">():</span>
</span><span class='line'>    <span class="n">book</span> <span class="o">=</span> <span class="n">WeightedGradebook</span><span class="p">()</span>
</span><span class='line'>    <span class="n">book</span><span class="o">.</span><span class="n">add_student</span><span class="p">(</span><span class="s">&#39;Isaac&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">book</span><span class="o">.</span><span class="n">report_grade</span><span class="p">(</span><span class="s">&#39;Isaac&#39;</span><span class="p">,</span> <span class="s">&#39;Math&#39;</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mf">0.90</span><span class="p">)</span>
</span><span class='line'>    <span class="n">book</span><span class="o">.</span><span class="n">report_grade</span><span class="p">(</span><span class="s">&#39;Isaac&#39;</span><span class="p">,</span> <span class="s">&#39;Math&#39;</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mf">0.10</span><span class="p">)</span>
</span><span class='line'>    <span class="n">book</span><span class="o">.</span><span class="n">report_grade</span><span class="p">(</span><span class="s">&#39;Isaac&#39;</span><span class="p">,</span> <span class="s">&#39;Gym&#39;</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mf">0.20</span><span class="p">)</span>
</span><span class='line'>    <span class="n">book</span><span class="o">.</span><span class="n">report_grade</span><span class="p">(</span><span class="s">&#39;Isaac&#39;</span><span class="p">,</span> <span class="s">&#39;Gym&#39;</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mf">0.20</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">book</span><span class="o">.</span><span class="n">average_grade</span><span class="p">(</span><span class="s">&#39;Isaac&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the <code>average_grade</code> internal implementation is really complicated and hard to understand because of the nested dictionaries.
Externally, the class is not easy to use for clients with four positional arguments: it is easy to mix up the order of arguments, such as weight <code>0.90</code> with score <code>90</code>.</p>

<p>In those cases, it is recommended to unpack dictionaries into separate classes.
Tuples can be unpack into simple classes using <code>namedtuples</code> from <code>collections</code> module.
The line count may be much larger but it is worth it because 1) internally, implementation can be much easier to understand 2) externally, interface can be easier to use.</p>

<figure class='code'><figcaption><span>Use helper classes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Score</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Weighted score.&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">score</span><span class="p">,</span> <span class="n">weight</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="n">score</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">weight</span> <span class="o">=</span> <span class="n">weight</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">weighted_score</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">score</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">weight</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Subject</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Keeping track of weighted scores for a subject&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_grades</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_score</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">score</span><span class="p">,</span> <span class="n">weight</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_grades</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">Score</span><span class="p">(</span><span class="n">score</span><span class="p">,</span> <span class="n">weight</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">average_score</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">total</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">weighted_score</span><span class="p">()</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_grades</span><span class="p">)</span>
</span><span class='line'>        <span class="n">weight</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">weight</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_grades</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">total</span> <span class="o">/</span> <span class="n">weight</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Student</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Keeping track of subjects for a student&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_subjects</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="n">Subject</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">subject</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_subjects</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">average_grade</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot; Average grade over all subjects&quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">count</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_subjects</span><span class="p">)</span>
</span><span class='line'>        <span class="n">total</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">average_score</span><span class="p">()</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_subjects</span><span class="o">.</span><span class="n">values</span><span class="p">())</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">total</span> <span class="o">/</span> <span class="n">count</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ClassGradebook</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Change WeightedGradebook to make the score in each subject is weighted.</span>
</span><span class='line'><span class="sd">    For example, final is more weighted than homework.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_book</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="n">Student</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">student</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_book</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">report_grade</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">subject</span><span class="p">,</span> <span class="n">score</span><span class="p">,</span> <span class="n">weight</span><span class="p">):</span>
</span><span class='line'>        <span class="n">student</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_book</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>
</span><span class='line'>        <span class="n">student</span><span class="o">.</span><span class="n">subject</span><span class="p">(</span><span class="n">subject</span><span class="p">)</span><span class="o">.</span><span class="n">add_score</span><span class="p">(</span><span class="n">score</span><span class="p">,</span> <span class="n">weight</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">average_grade</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="n">student</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_book</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">student</span><span class="o">.</span><span class="n">average_grade</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main_class_2</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Helper classes help easier-to-use interface&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">book</span> <span class="o">=</span> <span class="n">ClassGradebook</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">isaac</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="n">student</span><span class="p">(</span><span class="s">&#39;Isaac&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">math</span> <span class="o">=</span> <span class="n">isaac</span><span class="o">.</span><span class="n">subject</span><span class="p">(</span><span class="s">&#39;Math&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">math</span><span class="o">.</span><span class="n">add_score</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span> <span class="mf">0.90</span><span class="p">)</span>
</span><span class='line'>    <span class="n">math</span><span class="o">.</span><span class="n">add_score</span><span class="p">(</span><span class="mi">85</span><span class="p">,</span> <span class="mf">0.10</span><span class="p">)</span>
</span><span class='line'>    <span class="n">gym</span> <span class="o">=</span> <span class="n">isaac</span><span class="o">.</span><span class="n">subject</span><span class="p">(</span><span class="s">&#39;Gym&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">gym</span><span class="o">.</span><span class="n">add_score</span><span class="p">(</span><span class="mi">95</span><span class="p">,</span> <span class="mf">0.20</span><span class="p">)</span>
</span><span class='line'>    <span class="n">gym</span><span class="o">.</span><span class="n">add_score</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="mf">0.20</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">isaac</span><span class="o">.</span><span class="n">average_grade</span><span class="p">())</span>
</span><span class='line'>    <span class="c"># Equivalent to the old interface</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">book</span><span class="o">.</span><span class="n">average_grade</span><span class="p">(</span><span class="s">&#39;Isaac&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Item 20: Use plain attributes instead of getter and setter methods</h3>

<p>For people migrating to Python from Java, they tend to explicit create getter and setter methods for every single attribute in the class.
In Python, it is not recommended and plain attributes should be directly used.</p>

<p>The reason that most people use setters and getters in Java is that in case of changes required for getting or setting an attribute, they can do it easily in corresponding setter or getter method.
In Python, such cases are covered in <code>@property</code> and <code>@setter</code> decorators.</p>

<p>For example, we have the following simple class:</p>

<figure class='code'><figcaption><span>Simple class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Resistor</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ohms</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ohms</span> <span class="o">=</span> <span class="n">ohms</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">res</span> <span class="o">=</span> <span class="n">Resistor</span><span class="p">(</span><span class="mf">1e3</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">ohms</span><span class="p">)</span>
</span><span class='line'>    <span class="n">res</span><span class="o">.</span><span class="n">ohms</span> <span class="o">+=</span> <span class="mf">2e3</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">ohms</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s say at some point, we decide that we need special behaviors in getting and setting attribute <code>ohms</code> of Resistor objects.
In that case, we can easily add special behaviors (for example, printing message) as follows:</p>

<figure class='code'><figcaption><span>Getter and setter with special behaviors</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Resistor</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ohms</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_ohms</span> <span class="o">=</span> <span class="n">ohms</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">ohms</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Getter&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_ohms</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@ohms.setter</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">ohms</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Setter&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_ohms</span> <span class="o">=</span> <span class="n">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>The same <code>main()</code> method above will now have the following output:</p>

<figure class='code'><figcaption><span>Before and after output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Before
</span><span class='line'>1000.0
</span><span class='line'>3000.0
</span><span class='line'>
</span><span class='line'># After
</span><span class='line'>Getter
</span><span class='line'>1000.0
</span><span class='line'>Getter
</span><span class='line'>Setter
</span><span class='line'>Getter
</span><span class='line'>3000.0</span></code></pre></td></tr></table></div></figure>


<p>Note that such setter is also effective when the attribute is set in parent constructor, as shown in example below.
This ensures that any validation check in <code>setter</code> method for the attribute is also active at initialization of that object.</p>

<figure class='code'><figcaption><span>Setter activated in parent constructor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Resistor</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ohms</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ohms</span> <span class="o">=</span> <span class="n">ohms</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">LoudResistor</span><span class="p">(</span><span class="n">Resistor</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ohms</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">LoudResistor</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">ohms</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">ohms</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Getter&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_ohms</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@ohms.setter</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">ohms</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Check value&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_ohms</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># This will print &quot;Check value&quot;</span>
</span><span class='line'>    <span class="c"># Setter in subclass LoudResistor is activated </span>
</span><span class='line'>    <span class="c"># although &quot;ohms&quot; attribute is set in superclass Resistor</span>
</span><span class='line'>    <span class="n">res2</span> <span class="o">=</span> <span class="n">LoudResistor</span><span class="p">(</span><span class="mf">1e3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tips:</p>

<ul>
<li>Do not modify internal states/attributes or any side effect in getter methods. Only change object&rsquo;s state in setter methods.</li>
<li>Getter method should be fast. Avoid doing complex computations in getter methods.</li>
<li>You can use <code>setter</code> to create unmodifiable objects in Python. See <a href="https://github.com/tdongsi/effective_python">here</a>.</li>
</ul>


<h3>Item 21: Prefer internal attributes over private ones</h3>

<p>In Python, there are only two types of attribute: public (e.g., <code>my_att</code>) and private attributes (e.g., <code>__my_att</code>).
In reality, there is no tight access control like other languages such as Jaza.
The private attribute names are prefixed with the class name (e.g., <code>_MyClass__my_att</code>) to create another &ldquo;namespace&rdquo; for private attributes.
This will complicate accessing the private attributes in the subclasses while not effectively preventing anyone from accessing the private attributes when the need arises.
In general, it is better to use protected/&ldquo;internal&rdquo; attributes <code>_my_att</code> with the assumption that someone can extend usage of those internal attributes later on.</p>

<p>The scenario where you should use private attributes is when you want to avoid accidental name clash in the subclass.</p>

<figure class='code'><figcaption><span>Scenario for using private attribute</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">ApiClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_value</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_value</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Child</span><span class="p">(</span><span class="n">ApiClass</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">Child</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Here, Child class author is not aware of</span>
</span><span class='line'>        <span class="c"># internal implementation of ApiClass</span>
</span><span class='line'>        <span class="c"># he accidentally override an internal attribute of ApiClass</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_value</span> <span class="o">=</span> <span class="s">&#39;hello&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">Child</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">get</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, <code>_value</code> in ApiClass should be a private attribute.</p>

<h3>Item 22: Use <code>@classmethod</code> polymorphism to construct objects generically</h3>

<p>In other languages such as Java, you can have overloaded constructors to construct objects of the same class/interface in different ways.
However, in Python, the method <code>__init__</code> can&rsquo;t be overloaded.
Instead, you can use <code>@classmethod</code> polymorphism to construct objects generically.</p>

<figure class='code'><figcaption><span>Example of @classmethod polymorphism</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">threading</span> <span class="kn">import</span> <span class="n">Thread</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">InputData</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">NotImplementedError</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@classmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">generate_inputs</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">config</span><span class="p">):</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">NotImplementedError</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PathInputData</span><span class="p">(</span><span class="n">InputData</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="s">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">handle</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">handle</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@classmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">generate_inputs</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">config</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot; Generic version of generate_inputs&quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">data_dir</span> <span class="o">=</span> <span class="n">config</span><span class="p">[</span><span class="s">&#39;data_dir&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">data_dir</span><span class="p">):</span>
</span><span class='line'>            <span class="k">yield</span> <span class="n">cls</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="n">name</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">generate_inputs</span><span class="p">(</span><span class="n">data_dir</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Original version of generate_inputs&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">data_dir</span><span class="p">):</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">PathInputData</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="n">name</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Worker</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">input_data</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">input_data</span> <span class="o">=</span> <span class="n">input_data</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">result</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">map</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">NotImplementedError</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">reduce</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">NotImplementedError</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@classmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create_workers</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">input_class</span><span class="p">,</span> <span class="n">config</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot; Generic version of create_worker.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param input_class: class that implements InputData interface.</span>
</span><span class='line'><span class="sd">        :param config: dictionary of configs to be used by InputData.</span>
</span><span class='line'><span class="sd">        :return:</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">workers</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">input_data</span> <span class="ow">in</span> <span class="n">input_class</span><span class="o">.</span><span class="n">generate_inputs</span><span class="p">(</span><span class="n">config</span><span class="p">):</span>
</span><span class='line'>            <span class="n">workers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">cls</span><span class="p">(</span><span class="n">input_data</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">workers</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">create_worker</span><span class="p">(</span><span class="n">input_list</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Original version of create_worker&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">workers</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">input_data</span> <span class="ow">in</span> <span class="n">input_list</span><span class="p">:</span>
</span><span class='line'>        <span class="n">workers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">LineCounter</span><span class="p">(</span><span class="n">input_data</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">workers</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">LineCounter</span><span class="p">(</span><span class="n">Worker</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">map</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">input_data</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">result</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">b</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">reduce</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">result</span> <span class="o">+=</span> <span class="n">other</span><span class="o">.</span><span class="n">result</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">workers</span><span class="p">):</span>
</span><span class='line'>    <span class="n">threads</span> <span class="o">=</span> <span class="p">[</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">w</span><span class="o">.</span><span class="n">map</span><span class="p">)</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">workers</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">first</span><span class="p">,</span> <span class="n">rest</span> <span class="o">=</span> <span class="n">workers</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">workers</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">other</span> <span class="ow">in</span> <span class="n">rest</span><span class="p">:</span>
</span><span class='line'>        <span class="n">first</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">first</span><span class="o">.</span><span class="n">result</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">mapreduce</span><span class="p">(</span><span class="n">data_dir</span><span class="p">):</span>
</span><span class='line'>    <span class="n">inputs</span> <span class="o">=</span> <span class="n">generate_inputs</span><span class="p">(</span><span class="n">data_dir</span><span class="p">)</span>
</span><span class='line'>    <span class="n">workers</span> <span class="o">=</span> <span class="n">create_worker</span><span class="p">(</span><span class="n">inputs</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">execute</span><span class="p">(</span><span class="n">workers</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">mapreduce_generic</span><span class="p">(</span><span class="n">worker_class</span><span class="p">,</span> <span class="n">input_class</span><span class="p">,</span> <span class="n">config</span><span class="p">):</span>
</span><span class='line'>    <span class="n">workers</span> <span class="o">=</span> <span class="n">worker_class</span><span class="o">.</span><span class="n">create_workers</span><span class="p">(</span><span class="n">input_class</span><span class="p">,</span> <span class="n">config</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">execute</span><span class="p">(</span><span class="n">workers</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">backports.tempfile</span> <span class="kn">import</span> <span class="n">TemporaryDirectory</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">write_test_files</span><span class="p">(</span><span class="n">temp_dir</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
</span><span class='line'>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">temp_dir</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)),</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">handle</span><span class="p">:</span>
</span><span class='line'>            <span class="n">handle</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span> <span class="o">*</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="n">TemporaryDirectory</span><span class="p">()</span> <span class="k">as</span> <span class="n">temp_dir</span><span class="p">:</span>
</span><span class='line'>    <span class="n">write_test_files</span><span class="p">(</span><span class="n">temp_dir</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># line_count = mapreduce(temp_dir)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;data_dir&#39;</span><span class="p">:</span> <span class="n">temp_dir</span><span class="p">}</span>
</span><span class='line'>    <span class="n">line_count</span> <span class="o">=</span> <span class="n">mapreduce_generic</span><span class="p">(</span><span class="n">LineCounter</span><span class="p">,</span> <span class="n">PathInputData</span><span class="p">,</span> <span class="n">config</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">line_count</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Python Pt. 3: Functions]]></title>
    <link href="http://tdongsi.github.io/python/blog/2018/08/12/effective-python-part-3/"/>
    <updated>2018-08-12T00:19:32-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2018/08/12/effective-python-part-3</id>
    <content type="html"><![CDATA[<p>This post corresponds to Lesson 3 &ldquo;Using Functions&rdquo; of <a href="https://www.safaribooksonline.com/videos/effective-python/9780134175249">&ldquo;Effective Python&rdquo; course</a>.</p>

<!--more-->


<h3>Item 13: Know how closures interact with variable scope</h3>

<p>For this item&rsquo;s discussion, let&rsquo;s say that we have a list of integers that needs to be sorted, with the twist that some of those integers are in a special group (higher prirority) and has to be placed in front of the list (referred as <strong>Problem-1</strong>).
For example, those integers could be IDs of different UI components, with those of higher priority belong to the foreground and the rest are in the background.
One solution to this problem is as follows:</p>

<figure class='code'><figcaption><span>Solution to Problem-1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">NUMBERS</span> <span class="o">=</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span><span class='line'><span class="n">GROUP</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sort_priority</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">group</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Sort the input numbers but put those in &quot;group&quot; first.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param numbers: list of input numbers.</span>
</span><span class='line'><span class="sd">    :param group: set of numbers in priority group.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">group</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">numbers</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">helper</span><span class="p">)</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main_original</span><span class="p">():</span>
</span><span class='line'>    <span class="n">numbers</span> <span class="o">=</span> <span class="n">NUMBERS</span><span class="p">[:]</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">sort_priority</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">GROUP</span><span class="p">))</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, the <strong>additional requirement</strong> is that we want to know if any item in the input list belongs to the special <code>GROUP</code> (now referred as <strong>Problem-2</strong>).
To accommodate this new requirement, one can naively modify Problem-1&rsquo;s solution as follows:</p>

<figure class='code'><figcaption><span>Naive solution to Problem-2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sort_priority</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">group</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Sort the input numbers but put those in &quot;group&quot; first.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param numbers: list of input numbers.</span>
</span><span class='line'><span class="sd">    :param group: set of numbers in priority group.</span>
</span><span class='line'><span class="sd">    :return: True if any number in priority is found.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">found</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">group</span><span class="p">:</span>
</span><span class='line'>            <span class="n">found</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">numbers</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">helper</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">found</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this naive (and incorrect) solution, an additional variable <code>found</code> is used to track if any element in the input list <code>numbers</code> is special and set accordingly.
However, this solution proves not working as expected: the above <code>sort_priority</code> method always returns <code>False</code>, regardless of the input list of numbers.</p>

<p>The reason for this is a common mistake of Python users when using the same variable in different scopes.
In this example, <code>found</code> is found in two different scopes: in the enclosed <code>helper</code> method and in the enclosing <code>sort_priority</code> method.
In most cases, when we simply refer to a variable (i.e., read operation), Python will do its best to look up for that variable in different scopes, as shown below.</p>

<figure class='code'><figcaption><span>Variable reference in different scopes.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">meep</span> <span class="o">=</span> <span class="mi">23</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">enclosing</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Variable reference in different scopes.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">foo</span> <span class="o">=</span> <span class="mi">15</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">my_func</span><span class="p">():</span>
</span><span class='line'>        <span class="n">bar</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>      <span class="c"># local scope</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>      <span class="c"># enclosing scope</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">meep</span><span class="p">)</span>     <span class="c"># global scope</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>      <span class="c"># built-in scope</span>
</span><span class='line'>        <span class="c"># print(not_exist)  # not found in any scopes</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">my_func</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">enclosing</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Output:</span>
</span><span class='line'><span class="c"># 10</span>
</span><span class='line'><span class="c"># 15</span>
</span><span class='line'><span class="c"># 23</span>
</span><span class='line'><span class="c"># &lt;type &#39;str&#39;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, variable assignment has a slightly different treatment.
When we try to assign to a variable for the first time in the inner scope, Python will create a new local variable.
This will lead to subtle difference if we have variable assignment in the inner scope, as shown in the following example.</p>

<figure class='code'><figcaption><span>Variable assignment in different scopes.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">enclosing_assignment</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Variable assignment in different scopes.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">foo</span> <span class="o">=</span> <span class="mi">15</span>
</span><span class='line'>    <span class="n">foo</span> <span class="o">=</span> <span class="mi">25</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">my_func</span><span class="p">():</span>
</span><span class='line'>        <span class="n">foo</span> <span class="o">=</span> <span class="mi">15</span>
</span><span class='line'>        <span class="n">bar</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">my_func</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">enclosing_assignment</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Output:</span>
</span><span class='line'><span class="c"># 15</span>
</span><span class='line'><span class="c"># 5</span>
</span><span class='line'><span class="c"># 25</span>
</span></code></pre></td></tr></table></div></figure>


<p>Going back to our Problem-2, the problem of our naive solution is that we have assignment to the variable <code>found</code> in the inner scope.
Python will create a new variable in <code>helper</code>&rsquo;s scope and ignore the variable <code>found</code> already defined in the outer scope <code>sort_priority</code>.
After <code>helper</code> method is done, <code>found</code> in <code>sort_priority</code> scope still has the original value <code>False</code> and it is what the method returns.</p>

<p>There are many ways to work around the scope problem with variable assignment described above.
In Python 3, <code>nonlocal</code> keyword is introduced exactly for this situation.
The keyword <code>nonlocal</code>, similar to <code>global</code> keyword, allows you to assign to variables in outer, but non-global, scope.</p>

<figure class='code'><figcaption><span>Using nonlocal keyword for Problem-2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sort_priority_python_3</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">group</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Sort the input numbers but put those in &quot;group&quot; first.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">found</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">group</span><span class="p">:</span>
</span><span class='line'>            <span class="n">nonlocal</span> <span class="n">found</span>
</span><span class='line'>            <span class="n">found</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">numbers</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">helper</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">found</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, using <code>nonlocal</code> keyword can be confusing and is generally not recommended, especially if the variable is declared a couple of scopes/layers away from the assignment.
In addition, such approach would not work in Python 2.
In another approach that would work for both Python 2 and 3, one can use the following trick:</p>

<figure class='code'><figcaption><span>Using array for Problem-2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sort_priority_python_2</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">group</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Sort the input numbers but put those in &quot;group&quot; first.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">found</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">group</span><span class="p">:</span>
</span><span class='line'>            <span class="n">found</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">numbers</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">helper</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">found</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this trick, instead of using a boolean variable <code>found</code>, you use a singleton (one-element) array <code>found</code>.
Because <code>found</code> is now an array, the variable reference rules, instead of variable assignment rules, apply and the <code>found</code> variable in the outer scope is used.
Although it is a great trick, such code is not really clear.</p>

<p>The final and recommended solution is to extract the <code>helper</code> function into a CheckSpecial class instead.
The original <code>helper</code> method used for <strong>Problem-1</strong> can be converted to a Helper/CheckSpecial class as follows:</p>

<figure class='code'><figcaption><span>Using CheckSpecial class for Problem-1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">CheckSpecial</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">group</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">group</span> <span class="o">=</span> <span class="n">group</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">x</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">group</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sort_priority_solved</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">group</span><span class="p">):</span>
</span><span class='line'>    <span class="n">helper</span> <span class="o">=</span> <span class="n">CheckSpecial</span><span class="p">(</span><span class="n">GROUP</span><span class="p">)</span>
</span><span class='line'>    <span class="n">numbers</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">helper</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the solution to starting <strong>Problem-1</strong> shown above, the origial <code>helper</code> function&rsquo;s logic has been encapsulated into a CheckSpecial class, in the <code>__call__</code> method specifically.
When the additional requirement &ldquo;check if special number encountered&rdquo; comes in, it is apparent that <code>helper</code> function has to become a stateful closure.
Since we already has it converted to <code>CheckSpecial</code> class, it would be easier to keep the state as a new <code>CheckSpecial</code> object&rsquo;s attribute <code>found</code> and update the object state accordingly, as follows:</p>

<figure class='code'><figcaption><span>Updating CheckSpecial class for Problem-2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">CheckSpecial</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">group</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">group</span> <span class="o">=</span> <span class="n">group</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">found</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">x</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">group</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">found</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sort_priority_solved</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">group</span><span class="p">):</span>
</span><span class='line'>    <span class="n">helper</span> <span class="o">=</span> <span class="n">CheckSpecial</span><span class="p">(</span><span class="n">GROUP</span><span class="p">)</span>
</span><span class='line'>    <span class="n">numbers</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">helper</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">helper</span><span class="o">.</span><span class="n">found</span>
</span></code></pre></td></tr></table></div></figure>


<p>IMHO, this approach is much clearer and works for both Python 2 and 3.</p>

<h3>Item 14: Accept callables for stateful closures</h3>

<p>Many of Python APIs allow you to customize behavior by passing in a function, such as <code>sort(key=...)</code> method in the last section &ldquo;Item 13&rdquo;.
We also see that it is possible to pass stateful closure as a function into those hooks for record-keeping purposes, for example.
We showed different ways to do that in Python 2 and 3: <code>nonlocal</code> keyword, <code>list</code> trick, and a helper class.
Using a class to encapsulate a stateful closure is the highly recommended approach.</p>

<figure class='code'><figcaption><span>Another version of CheckSpecial class for Problem-2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">CheckSpecial</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">group</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">group</span> <span class="o">=</span> <span class="n">group</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">found</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">x</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">group</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">found</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sort_priority_solved</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">group</span><span class="p">):</span>
</span><span class='line'>    <span class="n">helper</span> <span class="o">=</span> <span class="n">CheckSpecial</span><span class="p">(</span><span class="n">GROUP</span><span class="p">)</span>
</span><span class='line'>    <span class="n">numbers</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">helper</span><span class="o">.</span><span class="n">check</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">helper</span><span class="o">.</span><span class="n">found</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let us consider an alternative version of CheckSpecial class where we use standard method name <code>check</code> instead of special method <code>__call__</code>.
And it works perfectly fine if you pass <code>helper.check</code> as a function: <code>sort</code> has no idea that we are passing a method of a stateful object and it does not care.</p>

<p>However, for programmers new to the code, the <code>CheckSpecial</code> class is really awkward: it is not clear the purpose of the class in isolation and that its instances are never to be created and used alone.
Instead, in the last section, we intentionally use <code>__call__</code> method to make each CheckSpecial instance a stateful &ldquo;callable&rdquo;.
In that way, the intention of the class is clearer: it is a stateful closure that is meant to be passed into the hook of another function (e.g., <code>sort</code>, <code>defaultdict</code>).</p>

<h3>Item 15: Reduce visual noise with variable positional arguments</h3>

<figure class='code'><figcaption><span>Example of variable position arguments</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&#39;Check&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&#39;Check&#39;</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Two things to watch for when using variable positional arguments:</p>

<ul>
<li>If a generator is passed in, the generator will be exhausted as the arguments.</li>
<li>When you change the signature/behavior of the method such as adding new argument in front, it can misbehave quietly.</li>
</ul>


<h3>Item 16: Provide optional behavior with keyword arguments</h3>

<p>Positional arguments come before keyword arguments.
You can&rsquo;t pass positional arguments after keyword argyment.</p>

<p>The flexibility of keyword arguments provides three significant benefits:</p>

<ol>
<li>Functional calls are more clear.</li>
<li>Default arguments defined in function definitions.</li>
<li>Allow extending a function&rsquo;s parameters while it is still backward compatible.</li>
</ol>


<h3>Item 17: Enforce clarity with keyword-only arguments</h3>

<p>In Python 3, you can specify <code>*</code> in the function&rsquo;s argument list.</p>

<figure class='code'><figcaption><span>Keyword-only parameters</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; def foo(pos, *, forcenamed):
</span><span class='line'>...   print(pos, forcenamed)
</span><span class='line'>... 
</span><span class='line'>&gt;&gt;&gt; foo(pos=10, forcenamed=20)
</span><span class='line'>10 20
</span><span class='line'>&gt;&gt;&gt; foo(10, forcenamed=20)
</span><span class='line'>10 20
</span><span class='line'>&gt;&gt;&gt; foo(10, 20)
</span><span class='line'>Traceback (most recent call last):
</span><span class='line'>  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
</span><span class='line'>TypeError: foo() takes exactly 1 positional argument (2 given)</span></code></pre></td></tr></table></div></figure>


<p>This can also be combined with <code>**kwargs</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">forcenamed</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Python 2, the alternative is to <code>pop</code> the <code>**kwargs</code> with default values.
However, that requires docstring to explain what parameters (keys) are expected in <code>kwargs</code> and you lose signature information in your smart editor.</p>

<p>Another alternative in Python 2 is to use a dummy keyword argument to limit number of positional argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">_dummy</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">_kw</span><span class="o">=</span><span class="n">_dummy</span><span class="p">,</span> <span class="n">forcenamed</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">_kw</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">_dummy</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s">&quot;foo() takes 1 positional argument (at least 2 given)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will allow:</p>

<figure class='code'><figcaption><span>Examples</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Allowed</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">,</span> <span class="n">collapse</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="n">spacing</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># But not allowed</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>See <a href="https://stackoverflow.com/questions/2965271/forced-naming-of-parameters-in-python">here</a> for more discussions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Python Pt. 2: Comprehensions & Generators]]></title>
    <link href="http://tdongsi.github.io/python/blog/2018/08/12/effective-python-part-2/"/>
    <updated>2018-08-12T00:19:30-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2018/08/12/effective-python-part-2</id>
    <content type="html"><![CDATA[<p>This post corresponds to Lesson 2 &ldquo;Comprehensions &amp; Generators&rdquo; of <a href="https://www.safaribooksonline.com/videos/effective-python/9780134175249">&ldquo;Effective Python&rdquo; course</a>.</p>

<!--more-->


<h3>Item 8: Use list comprehension instead of MAP and FILTER</h3>

<p>List comprehension offers the more intuitive way to transform a list to another list.
Note that in Python 3, the <code>map</code> function now returns an iterator instead of a list like Python 2.
Therefore, you have to add an extra step to convert to a list.</p>

<figure class='code'><figcaption><span>List comprehension</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="c"># Recommended</span>
</span><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="c"># Old way: map in Python 2</span>
</span><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="c"># Old way: map in Python 3</span>
</span><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">a</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In addition, list comprehension makes it easy to add a condition for filtering.
Using <code>filter</code> and <code>map</code>, it becomes very &ldquo;noisy&rdquo; with multiple enclosing functions and lambdas, as shown below.</p>

<figure class='code'><figcaption><span>List comprehension with filtering</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="c"># Recommended</span>
</span><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">b</span> <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="c"># Old way in Python 2</span>
</span><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="n">b</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dictionary and set also have similar comprehension expressions for similar purposes.
The final note is that for very complex transformations and filtering that is not easy to pack into comprehension expressions, it is recommended to explicitly use the <code>for</code> loop instead.</p>

<h3>Item 9: Avoid more than two expressions in list comprehensions</h3>

<p>As examples, the transformations of two-dimensional matrices can be done easily with list comprehensions, as follows.</p>

<figure class='code'><figcaption><span>Transforming matrices</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">matrix</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]]</span>
</span><span class='line'><span class="n">flatten</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">matrix</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">row</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">flatten</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">squared</span> <span class="o">=</span> <span class="p">[[</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">row</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">matrix</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">squared</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, for 3D (or more) matrices, such approach with list comprehensions can be really hard to read.</p>

<figure class='code'><figcaption><span>3D matrix</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 3D matrix</span>
</span><span class='line'><span class="n">matrix</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]],</span>
</span><span class='line'>    <span class="p">[[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">]]</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="n">flatten</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">sublist1</span> <span class="ow">in</span> <span class="n">matrix</span>
</span><span class='line'>           <span class="k">for</span> <span class="n">sublist2</span> <span class="ow">in</span> <span class="n">sublist1</span>
</span><span class='line'>           <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">sublist2</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">flatten</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As shown above, even a simple transformation of matrix flattening can make the code hard to read due to multiple levels of <code>for</code> loops.
Instead of using list comprehensions in those cases, it is recommended to explicitly use <code>for</code> loops when there are more than two expressions in such list comprehensions.</p>

<figure class='code'><figcaption><span>3D matrix</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Recommended way</span>
</span><span class='line'><span class="n">flatten</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">sublist1</span> <span class="ow">in</span> <span class="n">matrix</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">sublist2</span> <span class="ow">in</span> <span class="n">sublist1</span><span class="p">:</span>
</span><span class='line'>        <span class="n">flatten</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">sublist2</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">flatten</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another example of abusing list comprehension is to perform multiple filtering operations, such as:</p>

<figure class='code'><figcaption><span>Multiple filtering operations</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">matrix</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]]</span>
</span><span class='line'><span class="n">filtered</span> <span class="o">=</span> <span class="p">[[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">row</span> <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">matrix</span> <span class="k">if</span> <span class="nb">sum</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">10</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">filtered</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, the expression performs filtering not only on rows in the matrix but also on elements in rows.
Such expressions are really hard to understand since the code is not read in the natural order of logic and flow of thoughts (see <a href="https://en.wikipedia.org/wiki/Literate_programming">literate programming</a>).
It is recommended to explicitly use <code>for</code> loops for such cases.</p>

<h3>Item 10: Consider generator expressions for large comprehensions</h3>

<p>The problems with list comprehensions are that they may create a whole new list containing all the data.
For large inputs, it can consume a significant amount of memory and can even crash your program.</p>

<p>For a (very contrived) example, let&rsquo;s say you want to return the length of each line in a file and its squares.
You can easily achieve that with the following list comprehensions.</p>

<figure class='code'><figcaption><span>List comprehension on a file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/tmp/my_file.txt&#39;</span><span class="p">)]</span>
</span><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">better</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, list comprehension on a file like this is very risky.
The file can be really large or even never ending (such as a network socket).
To solve this problem, Python has generator expressions, which are a generalization of comprehensions and generators.
A generator expression gives you an iterator that you can go through that will yield one item at a time from the input and you can determine how many output items you want to return.
The above code can be rewritten as follows:</p>

<figure class='code'><figcaption><span>Generator expression</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">better</span> <span class="o">=</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/tmp/my_file.txt&#39;</span><span class="p">))</span>
</span><span class='line'><span class="n">roots</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="o">**</span><span class="mf">0.5</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">better</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">roots</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">better</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">roots</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c">### Example Output</span>
</span><span class='line'><span class="p">[</span><span class="mi">37</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">44</span><span class="p">]</span>
</span><span class='line'><span class="p">(</span><span class="mi">37</span><span class="p">,</span> <span class="mi">1369</span><span class="p">)</span>
</span><span class='line'><span class="mi">20</span>
</span><span class='line'><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="mi">3600</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, another powerful outcome of using generator expressions is that they can be composed together.
When you call <code>next(roots)</code>, Python goes back up to the generator expression <code>better</code>, then realizes that it has to read another line out of the file.
It has to read the line, then compute its length.
That length value is then passed back to <code>roots</code> as <code>x</code> and for computing the tuple.
What&rsquo;s surprising is that chaining generators like this actually executes very quickly in Python.
When you&rsquo;re looking for a way to compose functionallity that&rsquo;s operating on a large stream of input, generator expressions are one of the best tools for the job.</p>

<h3>Item 11: Consider generator functions instead of returning lists</h3>

<p>Let&rsquo;s say you want to find the index of every single words in a string.
The typical approach will be something as follows:</p>

<figure class='code'><figcaption><span>Typical way</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">index_words_typical</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">text</span><span class="p">:</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">letter</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">letter</span> <span class="o">==</span> <span class="s">&#39; &#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>The typical approach that returns a list of indices has a problem.
It is dense and noisy with all logistics related to <code>result</code> list: initializing the list, appending to the list whenever a result is found.
A better way to write this function is to use a generator function, with <code>yield</code> statements, as follows:</p>

<figure class='code'><figcaption><span>Better way</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">index_words</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">text</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">letter</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">letter</span> <span class="o">==</span> <span class="s">&#39; &#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="k">yield</span> <span class="n">index</span><span class="o">+</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Equivalent outputs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">address</span> <span class="o">=</span> <span class="s">&#39;The quick brown fox jumps over the lazy dog&#39;</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">index_words</span><span class="p">(</span><span class="n">address</span><span class="p">)))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">index_words_typical</span><span class="p">(</span><span class="n">address</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Output</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">40</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">40</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the generator version of this function is much easier to read than the typical version that returns lists.
Most significantly, all of the interactions with the <code>result</code> list have been taken away.
Instead, you just have those <code>yield</code> statements, making it very obvious what is being returned.
That helps make it clear to new readers of the code.</p>

<p>The second problem of the typical approach is that it requires all results to be stored in the lists before being returned.
For huge inputs, this can cause your program to run out of memory and crash.
In contrast, the generator version of the function can handle any amount of output because it doesn&rsquo;t actually keep all of the results in memory that it found.
In the example above, if the input <code>address</code> is a huge text and you only need to display the first hundred indices, the typical approach <code>index_words_typical</code> might fail while the generator version works perfectly fine.</p>

<h3>Item 12: Be defensive when iterating over arguments</h3>

<figure class='code'><figcaption><span>Iterator as argument</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">normalize_data</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
</span><span class='line'>        <span class="n">percent</span> <span class="o">=</span> <span class="mf">100.0</span> <span class="o">*</span> <span class="n">value</span> <span class="o">/</span> <span class="n">total</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">percent</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">read_visits</span><span class="p">(</span><span class="n">data_path</span><span class="p">):</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">data_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>            <span class="k">yield</span> <span class="nb">int</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Testing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="s">&#39;/tmp/my_numbers.txt&#39;</span>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">15</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">35</span><span class="p">]:</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%d</span><span class="se">\n</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">normalize_data</span><span class="p">([</span><span class="mi">15</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">35</span><span class="p">]))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">normalize_data</span><span class="p">(</span><span class="n">read_visits</span><span class="p">(</span><span class="n">path</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[11.538461538461538, 61.53846153846154, 26.923076923076923]
</span><span class='line'>[]</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the output, <code>normalize_data</code> works fine with a list of numbers but it does not work when we are supplying an iterator as input.
The main reason is that we iterate multiple times with the input iterator.
After the first traversal for <code>sum</code>, the iterator is already exhausted and that explains an empty list for the output <code>result</code>.</p>

<p>The most straight-forward fix for the function <code>normalize_data</code> is probably to add a line <code>numbers = list(numbers)</code> at the beginning to materialize the iterator.
However, such fix will defeat the purpose of using iterators and the function <code>read_visits</code>: they allow handling a arbitrarily large number of inputs without committing a large working memory.</p>

<p>Another possible fix for the function <code>normalize_data</code> is as folllows:</p>

<figure class='code'><figcaption><span>Another fix</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">normalize_data_2</span><span class="p">(</span><span class="n">get_iter</span><span class="p">):</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">get_iter</span><span class="p">())</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">get_iter</span><span class="p">():</span>
</span><span class='line'>        <span class="n">percent</span> <span class="o">=</span> <span class="mf">100.0</span> <span class="o">*</span> <span class="n">value</span> <span class="o">/</span> <span class="n">total</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">percent</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>
</span><span class='line'><span class="n">get_iter</span> <span class="o">=</span> <span class="k">lambda</span><span class="p">:</span> <span class="n">read_visits</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">normalize_data_2</span><span class="p">(</span><span class="n">get_iter</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this approach, we recreate the iterator whenever we need to iterate the data.
So, if we need to traverse twice to normalize the data, we have to call <code>read_visits</code> twice, open the file, and read the data that many times.
The upside is that we have the correct behavior while still retaining the benefits of using iterators.
The problem of this approach is that it is very noisy and hard to read with <code>get_iter</code> and <code>lambda</code>.
A more Pythonic way to do the same thing is to use a container class for the behavior of <code>read_visits</code>, as follows:</p>

<figure class='code'><figcaption><span>Converting read_visits to a class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">ReadVisits</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data_path</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">data_path</span> <span class="o">=</span> <span class="n">data_path</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">data_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>                <span class="k">yield</span> <span class="nb">int</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">visits</span> <span class="o">=</span> <span class="n">ReadVisits</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">normalize_data</span><span class="p">(</span><span class="n">visits</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, <code>normalize_data</code> can be the same as before.
The idea is still the same, we recreate the iterator whenever we need to iterate the data.
In the example, when we iterate the <code>numbers</code> for computing <code>sum</code> or in <code>for</code> loop in <code>normalize_data</code> method, we effectively call <code>iter(numbers)</code> to retrieve the iterators.
It is defined in <code>__iter__</code> method, which will open the file and read the data whenver it is called.
However, it is much clearer and more readable than before since we encapsulate the behavior of <code>read_visits</code> method into the class <code>ReadVisits</code>.</p>

<p>Finally, one minor improvement that we can add is to validate if the input argument of <code>normalize_data</code> is a container, as opposed to plain old iterator.
If the argument is a plain old iterator, its data can be exhausted after first traversal and the <code>normalize_data</code> method will not behave correctly.
To check that, a simple check &ldquo;iter(numbers) is iter(numbers)&rdquo; will suffice.
For container-type arguments such as a list or <code>ReadVisits</code> object, each <code>iter</code> call returns a different iterator.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Python Pt. 1: Expressions and Statements]]></title>
    <link href="http://tdongsi.github.io/python/blog/2018/08/12/effective-python-part-1/"/>
    <updated>2018-08-12T00:19:06-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2018/08/12/effective-python-part-1</id>
    <content type="html"><![CDATA[<p>This post corresponds to Lesson 1 &ldquo;Using Expressions and Statements&rdquo; of <a href="https://www.safaribooksonline.com/videos/effective-python/9780134175249">&ldquo;Effective Python&rdquo; course</a>.</p>

<p>NOTE: While the book is about Python 3, my blog checks out its application in Python 2.</p>

<!--more-->


<h3>Item 1: Slice sequences</h3>

<p>Use <code>mlist[start:end]</code>.</p>

<p>1) Note that <code>a[:20]</code> or <code>a[-20:]</code> will quietly return the full list even when the list is smaller in size.
Meanwhile, <code>a[20]</code> or <code>a[-20]</code> will throw IndexError exception.
It could be pro or con, depending on the situation and if the programmer is aware of it.</p>

<p>2) Slice assignment can be used to truncate the list in the middle. Example: <code>a[2:7] = []</code>.</p>

<p><code>b=a[:]</code> is the idiom to create a copy of a list.</p>

<p>3) Be careful with the following idiom to get the last <code>n</code> items of the list.</p>

<figure class='code'><figcaption><span>WRONG: For input n, return the last n items from list</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="k">print</span> <span class="n">mlist</span><span class="p">[</span><span class="o">-</span><span class="n">n</span><span class="p">:]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code works in most cases. However, if <code>n</code> takes the value of 0, then it will return the whole list.</p>

<h3>Item 2: Avoid using start, end, and stride in a single slice</h3>

<p>Sequences can be sliced with the following syntax <code>a[start:end:stride]</code>.</p>

<p>1) <code>a[::-1]</code> is the common idiom to reverse a sequence. However, be careful when using the idiom with string, esepcially UTF-8 string.</p>

<figure class='code'><figcaption><span>WRONG: Reverse UTF-8 string</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">w</span> <span class="o">=</span> <span class="s">&#39;hello&#39;</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">w</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="n">z</span> <span class="o">=</span> <span class="n">y</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, if the input <code>w='谢谢'</code> with non-ASCII characters, <code>UnicodeDecodeError</code> might be thrown.</p>

<p>2) The author cautions against using all <code>start:end:stride</code> in a slice since it will be very confusing, especially with negative numbers.
For example, <code>a[-2:2:-2]</code> is very unintuitive to figure out which items will be selected.
The best practices are:</p>

<ol>
<li>If you must use stride, use positive number only.</li>
<li>Split <code>start:end:stride</code> into two operations: stride first <code>b=a[::-2]</code>, followed by truncation <code>c=b[-2:2]</code>. The order can be changed to get smallest intermediate subsequence.</li>
</ol>


<h3>Item 3: Prefer <code>enumerate</code> over <code>range</code></h3>

<p>Instead of <code>for</code> loop over <code>range(len(mlist))</code> to get the index, use this:</p>

<figure class='code'><figcaption><span>enumerate example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">idx</span><span class="p">,</span> <span class="n">item</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Item 4: Use <code>zip</code> to process iterators in parallel</h3>

<figure class='code'><figcaption><span>Example of zip</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;Kelly&#39;</span><span class="p">,</span> <span class="s">&#39;Lise&#39;</span><span class="p">,</span> <span class="s">&#39;Marie&#39;</span><span class="p">,</span> <span class="s">&#39;Alexander&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">letters</span> <span class="o">=</span> <span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">names</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Better way: use zip</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">better_way</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">names</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># In Python2, zip returns a list instead of a generator.</span>
</span><span class='line'>    <span class="k">print</span> <span class="nb">zip</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">names</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># In Python3, the above will print some &quot;&lt;zip object at 0x12345&gt;&quot;.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># To get something similar to Python3,</span>
</span><span class='line'>    <span class="c"># Use izip in itertools</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">python3_way</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">names</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">python3_way</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">names</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Find the longest name&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">izip</span>
</span><span class='line'>    <span class="n">longest_name</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>    <span class="n">current_max</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">length</span><span class="p">,</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">izip</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">names</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">length</span> <span class="o">&gt;</span> <span class="n">current_max</span><span class="p">:</span>
</span><span class='line'>            <span class="n">current_max</span> <span class="o">=</span> <span class="n">length</span>
</span><span class='line'>            <span class="n">longest_name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">longest_name</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">better_way</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">names</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Find the longest name&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">longest_name</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>    <span class="n">current_max</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">length</span><span class="p">,</span> <span class="n">name</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">names</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">length</span> <span class="o">&gt;</span> <span class="n">current_max</span><span class="p">:</span>
</span><span class='line'>            <span class="n">current_max</span> <span class="o">=</span> <span class="n">length</span>
</span><span class='line'>            <span class="n">longest_name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">longest_name</span>
</span></code></pre></td></tr></table></div></figure>


<p>1) Note that, in Python2, <code>zip</code> returns a list instead of a generator object like in Python3.
To simulate that behavior in Python3, use <code>izip</code> from <code>itertools</code> module.</p>

<p>2) The default behavior of <code>zip</code> is to stop after reaching the end of the shortest iterator.
To iterate until the end of the longest iterator, use <code>itertools.zip_longest</code> in Python3 and <code>itertools.izip_longest</code> in Python2.</p>

<h3>Item 5: Avoid <code>else</code> blocks after <code>for</code> and <code>while</code> loops</h3>

<p>If you don&rsquo;t know that you can add an <code>else</code> block after <code>for</code> or <code>while</code> loops, you&rsquo;re better off that way.
The <code>else</code> block after loops are really confusing to all programmers who write or read the code.</p>

<p>The <code>else</code> block is originally intended for searching something in a loop, break if the search fails.
However, the name <code>else</code> is probably extremely poor choice, given the semantics of <code>else</code> in other constructs such as <code>if</code> or <code>try</code>.
Because of that, it is clearer to simply write a helper function before checking in a loop.</p>

<h3>Item 6: Take advantage of each block in <code>try</code>/<code>except</code>/<code>else</code>/<code>finally</code></h3>

<figure class='code'><figcaption><span>Function of each block</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Main action&quot;</span>
</span><span class='line'><span class="k">except</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Handle exception&quot;</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;When there is no exception&quot;</span>
</span><span class='line'><span class="k">finally</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Always&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>1) In Python 3, reading and writing Unicode to file is simple.
In Python2, you have to use <code>io</code> module.
In addition, the string is not Unicode by default.
You have to mark Unicode literals with prefix u (e.g., u’Hello’).</p>

<figure class='code'><figcaption><span>Unicode read/write in Python3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">handle</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/tmp/random_data.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">handle</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;success</span><span class="se">\n</span><span class="s">and</span><span class="se">\n</span><span class="s">new</span><span class="se">\n</span><span class="s">lines&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">handle</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">handle</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/tmp/random_data.txt&#39;</span><span class="p">)</span>  <span class="c"># Raise IOError</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">handle</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>   <span class="c"># Raise UnicodeDecodeError</span>
</span><span class='line'><span class="k">finally</span><span class="p">:</span>
</span><span class='line'>    <span class="n">handle</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Unicode read/write in Python2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">io</span>
</span><span class='line'>
</span><span class='line'><span class="n">handle</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;/tmp/random_data.txt&#39;</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">&#39;w&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">handle</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">u&#39;success</span><span class="se">\n</span><span class="s">and</span><span class="se">\n</span><span class="s">new</span><span class="se">\n</span><span class="s">lines&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">handle</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">handle</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;/tmp/random_data.txt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>  <span class="c"># Raise IOError</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">handle</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>   <span class="c"># Raise UnicodeDecodeError</span>
</span><span class='line'><span class="k">finally</span><span class="p">:</span>
</span><span class='line'>    <span class="n">handle</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>2) The above code is the correct way to handle file opening/closing.
One common mistake is as follows:</p>

<figure class='code'><figcaption><span>WRONG: Common mistake in file handling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">handle</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;/tmp/bad_path.txt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>  <span class="c"># Raise IOError</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">handle</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>   <span class="c"># Raise UnicodeDecodeError</span>
</span><span class='line'><span class="k">finally</span><span class="p">:</span>
</span><span class='line'>    <span class="n">handle</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>   <span class="c"># Raise IOError</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this code, in the event of file can&rsquo;t be opened, an IOError exception will be thrown.
However, after the exception is handled, in the <code>finally</code> block, another exception will be thrown since file is not open and <code>handle</code> is <code>None</code>.
This exception is now unexpected and can&rsquo;t be handled properly.
Instead of committing the above mistake, we should open the file outside the <code>try</code> block and if file opening fails, finish code execution since we can&rsquo;t really do anything without file open.
If you want to explicitly handle IOError exception, enclose it with another <code>try</code> block.</p>

<h3>Item 7: Consider context manager (contextlib) and <code>with</code> statements for <code>finally</code> behavior</h3>

<figure class='code'><figcaption><span>Context manager example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">logging</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">contextlib</span> <span class="kn">import</span> <span class="n">contextmanager</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@contextmanager</span>
</span><span class='line'><span class="k">def</span> <span class="nf">swallow_exception</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Ignore exception of the given class&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">cls</span><span class="p">:</span>
</span><span class='line'>        <span class="n">logging</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="s">&#39;Swallow exception&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="k">with</span> <span class="n">swallow_exception</span><span class="p">(</span><span class="ne">ZeroDivisionError</span><span class="p">):</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="mi">20</span> <span class="o">/</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Context manager example with handle return</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@contextmanager</span>
</span><span class='line'><span class="k">def</span> <span class="nf">log_level</span><span class="p">(</span><span class="n">level</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Get logger of the specified name and level&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">old_level</span> <span class="o">=</span> <span class="n">logger</span><span class="o">.</span><span class="n">getEffectiveLevel</span><span class="p">()</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">setLevel</span><span class="p">(</span><span class="n">level</span><span class="p">)</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">logger</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="n">setLevel</span><span class="p">(</span><span class="n">old_level</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="k">with</span> <span class="n">log_level</span><span class="p">(</span><span class="n">logging</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">,</span> <span class="s">&#39;mylogger&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">logger</span><span class="p">:</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&#39;test&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">logging</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&#39;Global logger: test&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 3 Quick Recap]]></title>
    <link href="http://tdongsi.github.io/python/blog/2017/08/13/python-3-quick-recap/"/>
    <updated>2017-08-13T23:49:57-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2017/08/13/python-3-quick-recap</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Requests Cookbook]]></title>
    <link href="http://tdongsi.github.io/python/blog/2017/08/06/requests-cookbook/"/>
    <updated>2017-08-06T23:17:25-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2017/08/06/requests-cookbook</id>
    <content type="html"><![CDATA[<p><code>requests</code> module is a simple HTTP client library in Python.</p>

<!-- more -->


<h3>Example: BART parking</h3>

<p>The problem is discussed <a href="http://tdongsi.github.io/blog/2016/10/30/automated-downloading-bart-parking-permits/">here</a>.
The <code>requests</code>&rsquo;s code snippets can be found <a href="https://github.com/tdongsi/bart-parking/blob/develop/python/bart.py">here</a>.</p>

<p>Featuring:</p>

<ul>
<li>Login with CSRF protection (with POST)</li>
<li>Cookie retrieval and usage</li>
<li>Binary download and saved to file.</li>
</ul>


<figure class='code'><figcaption><span>Different payload for POST</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># POST /bart/users/login/ HTTP/1.1</span>
</span><span class='line'><span class="c"># Content-Type: application/x-www-form-urlencoded</span>
</span><span class='line'><span class="n">HEADERS</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;Referer&quot;</span><span class="p">:</span> <span class="s">&quot;https://www.select-a-spot.com/bart/&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">params</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;username&quot;</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;password&quot;</span><span class="p">:</span> <span class="n">password</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;csrfmiddlewaretoken&quot;</span><span class="p">:</span> <span class="n">r</span><span class="o">.</span><span class="n">cookies</span><span class="p">[</span><span class="s">&quot;csrftoken&quot;</span><span class="p">],</span>
</span><span class='line'>            <span class="s">&quot;login&quot;</span><span class="p">:</span> <span class="s">&quot;Login&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&quot;https://www.select-a-spot.com/bart/users/login/&quot;</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">HEADERS</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">params</span><span class="p">,</span> <span class="n">allow_redirects</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># POST /kafka/topic HTTP/1.1</span>
</span><span class='line'><span class="c"># Content-Type: application/json</span>
</span><span class='line'><span class="n">my_data</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="n">IOT_TOPIC</span><span class="p">,</span> <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;/types/com.prod.emp&#39;</span><span class="p">}</span>
</span><span class='line'><span class="n">my_header</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;Accept&#39;</span><span class="p">:</span> <span class="s">&#39;application/json&#39;</span><span class="p">,</span> <span class="s">&#39;Content-Type&#39;</span><span class="p">:</span> <span class="s">&#39;application/json&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;POST: </span><span class="si">%s</span><span class="s">&#39;</span><span class="p">,</span> <span class="n">TOPIC_ENDPOINT</span><span class="p">)</span>
</span><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">TOPIC_ENDPOINT</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">my_header</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">my_data</span><span class="p">),</span> <span class="n">cert</span><span class="o">=</span><span class="n">KAFKA_CERTS</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that <code>json.dumps</code> is required for POST-ing JSON data. The typical service response:</p>

<figure class='code'><figcaption><span>Error message</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"exception":"org.springframework.http.converter.HttpMessageNotReadableException","message":"Bad Request"</span></code></pre></td></tr></table></div></figure>


<h3>SSL authentication</h3>

<p>You can specify your certificate and private key in <code>cert=(my_cert, my_key)</code> as a method parameter.
The certificate authority can be optionally specified (<code>s.verify = MY_CA</code>) or not (<code>s.verify = False</code>).</p>

<figure class='code'><figcaption><span>SSL authentication</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">test_kafka</span><span class="p">(</span><span class="n">my_cert</span><span class="p">,</span> <span class="n">my_key</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Top level function to test_kafka.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param my_cert: path to certificate.</span>
</span><span class='line'><span class="sd">    :param my_key: path to private key corresponding to the certificate.</span>
</span><span class='line'><span class="sd">    :return:</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ZOOKEEPER_EP</span> <span class="o">=</span> <span class="s">&#39;https://kafka-prd.corp.net:9090&#39;</span>
</span><span class='line'>    <span class="n">IOT_NAMESPACE</span> <span class="o">=</span> <span class="s">&#39;test&#39;</span>
</span><span class='line'>    <span class="n">MY_CA</span> <span class="o">=</span> <span class="s">&#39;download/ca.crt&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">verify</span> <span class="o">=</span> <span class="n">MY_CA</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_namespace</span><span class="p">():</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot; Test querying kafka namespace.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        Basically: curl -k -E ./kafka.p12:password &quot;https://kafka.prd:9090/namespaces/test&quot;</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">NAMESPACE_PATH</span> <span class="o">=</span> <span class="s">&#39;/namespaces&#39;</span>
</span><span class='line'>        <span class="n">endpoint</span> <span class="o">=</span> <span class="n">ZOOKEEPER_EP</span> <span class="o">+</span> <span class="n">NAMESPACE_PATH</span> <span class="o">+</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="n">IOT_NAMESPACE</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;GET: </span><span class="si">%s</span><span class="s">&#39;</span><span class="p">,</span> <span class="n">endpoint</span><span class="p">)</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">endpoint</span><span class="p">,</span> <span class="n">cert</span><span class="o">=</span><span class="p">(</span><span class="n">my_cert</span><span class="p">,</span> <span class="n">my_key</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&quot;Response: </span><span class="si">%s</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># print json.dumps(data, indent=4)</span>
</span><span class='line'>        <span class="c"># Print namespace</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;ID: </span><span class="si">%s</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">])</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">test_namespace</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Unit testing</h3>

<p>You can do unit testing by using <code>requests-mock</code> package.</p>

<figure class='code'><figcaption><span>Installation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Only required for Python 2. Mock is part of Python 3.
</span><span class='line'>pip install -U mock
</span><span class='line'>
</span><span class='line'>pip install requests-mock</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Example of mocking</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@requests_mock.mock</span><span class="p">()</span>
</span><span class='line'><span class="k">def</span> <span class="nf">test_get_env_status</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">m</span><span class="p">):</span>
</span><span class='line'>    <span class="c">#Test status code 400 returns False</span>
</span><span class='line'>    <span class="n">m</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">status_endpoint</span><span class="p">,</span> <span class="n">status_code</span><span class="o">=</span><span class="mi">404</span><span class="p">)</span>
</span><span class='line'>    <span class="k">with</span> <span class="n">mock</span><span class="o">.</span><span class="n">patch</span><span class="o">.</span><span class="n">dict</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">,{</span><span class="s">&#39;username&#39;</span><span class="p">:</span><span class="s">&#39;mytempuser&#39;</span><span class="p">,</span> <span class="s">&#39;password&#39;</span><span class="p">:</span><span class="s">&#39;temppass&#39;</span><span class="p">}):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="n">FlowSnakeEnvironment</span><span class="o">.</span><span class="n">get_env_status</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">fsenv_name</span><span class="p">),</span> <span class="bp">None</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>References</h4>

<ul>
<li><a href="https://media.readthedocs.org/pdf/requests-mock/latest/requests-mock.pdf">PDF doc</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: BFS and DFS]]></title>
    <link href="http://tdongsi.github.io/python/blog/2016/09/17/tutorial-bfs-and-dfs/"/>
    <updated>2016-09-17T15:47:11-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2016/09/17/tutorial-bfs-and-dfs</id>
    <content type="html"><![CDATA[<p><a href="http://eddmann.com/posts/depth-first-search-and-breadth-first-search-in-python/">http://eddmann.com/posts/depth-first-search-and-breadth-first-search-in-python/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Protocols]]></title>
    <link href="http://tdongsi.github.io/python/blog/2016/09/05/tutorial-protocols/"/>
    <updated>2016-09-05T23:50:24-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2016/09/05/tutorial-protocols</id>
    <content type="html"><![CDATA[<p>Python uses &ldquo;duck typing&rdquo;.
It does not have interfaces like Java to enforce certain behaviors:
<code>Iterable</code> iterface means that you can iterate an object of that class in a <code>for each</code> loop.
In Python, to do that, you have to override magic functions like <code>__iter__</code> to achieve some behaviors.
Each behavior is called &ldquo;protocol&rdquo; in this post since some involves overriding multiple magic funtions.</p>

<!-- Reference:
Evernote: "OOP in Python"
-->




<!--more-->


<h3>Iterator</h3>

<p>Here, <code>__iter__</code> just returns self, an object that has the function next(), which (when called) either returns a value or raises a StopIteration exception.
We’ve actually already met several iterators in disguise; in particular, <code>enumerate</code> is an iterator.
To drive home the point, here’s a simple reimplementation of <code>enumerate</code>:</p>

<figure class='code'><figcaption><span>Implement enumerator() as iterator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">my_enumerate</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>   <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">some_iter</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>      <span class="bp">self</span><span class="o">.</span><span class="n">some_iter</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">some_iter</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>      <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">...</span>   <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>      <span class="k">return</span> <span class="bp">self</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">...</span>   <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>      <span class="n">val</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">some_iter</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'><span class="o">...</span>      <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="o">...</span>      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span><span class="p">,</span> <span class="n">val</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">my_enumerate</span><span class="p">([</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">]):</span>
</span><span class='line'><span class="o">...</span>   <span class="k">print</span> <span class="n">n</span><span class="p">,</span> <span class="n">val</span>
</span><span class='line'><span class="mi">0</span> <span class="n">a</span>
</span><span class='line'><span class="mi">1</span> <span class="n">b</span>
</span><span class='line'><span class="mi">2</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Generator and Iterator protocol</h4>

<p>It is also much easier to write routines like enumerate as a generator than as an iterator:</p>

<figure class='code'><figcaption><span>Implement enumerate() using generator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">gen_enumerate</span><span class="p">(</span><span class="n">some_iter</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>   <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="o">...</span>   <span class="k">for</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">some_iter</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>      <span class="k">yield</span> <span class="n">count</span><span class="p">,</span> <span class="n">val</span>
</span><span class='line'><span class="o">...</span>      <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>But you can do things with generators that you couldn’t do with finite lists.
Consider two full implementation of Eratosthenes’ Sieve for finding prime numbers.
Full discussion is <a href="http://intermediate-and-advanced-software-carpentry.readthedocs.io/en/latest/idiomatic-python.html">here</a>.
Most of these are from &ldquo;Python tutorial&rdquo;.</p>

<h3>Container</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Basic Algorithms]]></title>
    <link href="http://tdongsi.github.io/python/blog/2016/09/02/tutorial-basic-algorithms/"/>
    <updated>2016-09-02T01:04:37-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2016/09/02/tutorial-basic-algorithms</id>
    <content type="html"><![CDATA[<p>For sorting algorithms, see <a href="http://tdongsi.github.io/python/blog/2016/08/30/tutorial-sorting-algorithms/">this post</a>.</p>

<!--more-->


<h3>Binary search</h3>

<figure class='code'><figcaption><span>Binary search</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">binary_search</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Binary search</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param mlist: sorted list in ascending order</span>
</span><span class='line'><span class="sd">    :param item:</span>
</span><span class='line'><span class="sd">    :return: index of item in list. -1 if not found.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_bin_search</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">start</span> <span class="o">==</span> <span class="n">end</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># empty</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">start</span> <span class="o">==</span> <span class="n">end</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># singleton</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">mlist</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">==</span> <span class="n">item</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">start</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">med</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span><span class="o">+</span><span class="n">end</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">mlist</span><span class="p">[</span><span class="n">med</span><span class="p">]</span> <span class="o">==</span> <span class="n">item</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">med</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mlist</span><span class="p">[</span><span class="n">med</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">item</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">_bin_search</span><span class="p">(</span><span class="n">med</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">_bin_search</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">med</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_bin_search</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more advanced binary operations, check <code>bisect</code> module.
Using <code>bisect</code> module for binary search will be awkward and not recommended in an interview.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: More About Quick Sort]]></title>
    <link href="http://tdongsi.github.io/python/blog/2016/08/31/tutorial-more-about-quick-sort/"/>
    <updated>2016-08-31T21:48:49-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2016/08/31/tutorial-more-about-quick-sort</id>
    <content type="html"><![CDATA[<p>This post discuses more about partition algorithms used in Quick Sort and its runtime.
Partition algorithms are also used to efficiently find certain groups of the list, also known as &ldquo;Quick Select&rdquo;.</p>

<!-- more -->


<h3>Discussion of Quick-sort runtime</h3>

<p>The Quick-sort algorithm has a very serious weakness: O(n<sup>2</sup>) runtime in the worst-case scenarios.
Because of this weakness, it should not used in any large-scale applications with arbitrary inputs.
This section discusses when those worst-case scenarios happen and how we can limit the chance of those scenarios.
Before going into details, it should be noted that worst-case scenarios cannot be avoided, and those scenarios depend on the partition strategy that Quick-sort uses.
To find the worst-case scenarios for a partition strategy, find a class of inputs such that after each partition, only one item is moved to either side of the pivot.</p>

<p>In the standard two-way partition strategy (&ldquo;&lt; pivot&rdquo; and &ldquo;>= pivot&rdquo;) shown in <a href="http://tdongsi.github.io/python/blog/2016/08/30/tutorial-sorting-algorithms/">this post</a>, it has the O(n<sup>2</sup>) runtime when the input list is sorted (Quiz: in which direction?).
One simple way to work around that problem is to shuffle the input list (by swapping random elements).
Shuffling the list can be done in O(n) time and should has no effect to overall O(nlogn) sorting runtime.</p>

<p>However, even with shuffling, the worst-case scenario happens when the input list has many repeated items.
One way to work around that is to three-way partition as shown below, only proceed with the &ldquo;&lt;&rdquo; and &ldquo;>&rdquo; partitions, and ignoring &ldquo;=&rdquo; partition.
This Quick-sort partition is usually the one used in most libraries and typically very fast in practice.</p>

<h4>Three-way partitions</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">partition3</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; In-place three-way partition of the list will return [&lt; pivot] [== pivot] [&gt; pivot].</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    The two-way partition ([&lt; pivot] [&gt;= pivot]) seen in previous quicksort has the following degenerate cases:</span>
</span><span class='line'><span class="sd">     1. Almost sorted lists. -&gt; Defense: Use random swaps to scramble the lists before sorting.</span>
</span><span class='line'><span class="sd">     2. Almost equal items. -&gt; Defense: Use this three-way partition strategy.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">swap</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class='line'>        <span class="n">mlist</span><span class="p">[</span><span class="n">a</span><span class="p">],</span> <span class="n">mlist</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="n">mlist</span><span class="p">[</span><span class="n">b</span><span class="p">],</span> <span class="n">mlist</span><span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pidx</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="n">lo</span><span class="p">,</span> <span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">swap</span><span class="p">(</span><span class="n">pidx</span><span class="p">,</span> <span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pivot</span> <span class="o">=</span> <span class="n">mlist</span><span class="p">[</span><span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">idx1</span> <span class="o">=</span> <span class="n">lo</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">lo</span><span class="p">,</span> <span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">mlist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">pivot</span><span class="p">:</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">idx1</span><span class="p">)</span>
</span><span class='line'>            <span class="n">idx1</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">idx2</span> <span class="o">=</span> <span class="n">idx1</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">idx1</span><span class="p">,</span> <span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">mlist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">pivot</span><span class="p">:</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">idx2</span><span class="p">)</span>
</span><span class='line'>            <span class="n">idx2</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">swap</span><span class="p">(</span><span class="n">idx2</span><span class="p">,</span> <span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">idx1</span><span class="p">,</span> <span class="n">idx2</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">quicksort3</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">lo</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">hi</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Quick-sort using three-way partition strategy.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">mlist</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mlist</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">hi</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">hi</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">lo</span> <span class="o">==</span> <span class="n">hi</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># empty list</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mlist</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">lo</span> <span class="o">==</span> <span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># singleton list</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mlist</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">p</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">partition3</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="p">)</span>
</span><span class='line'>        <span class="n">quicksort3</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'>        <span class="n">quicksort3</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">q</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">hi</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mlist</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few lessons for learning/interview before arriving at this final version:</p>

<ul>
<li>Separate to two same-level functions <code>quicksort3</code> and helper <code>partition3</code> for easy reading.
Do NOT put <code>partition3</code> as a function inside <code>quicksort3</code>.
It is hard to read on the whiteboard with inconsistent spacing.</li>
<li>Define one-liner <code>swap</code> inside <code>parition3</code> and use it.
It will make to code much easier to read.</li>
<li>Find random pivot: do not settle for <code>mlist[hi-1]</code> pivot.
The interviewers WILL ask anyway.</li>
<li>Use <code>idx1, idx2</code> as variables instead of <code>p, q</code> since it&rsquo;s so easy to mix up <code>p</code> and <code>q</code> in interview context.</li>
</ul>


<h3>Quick Select</h3>

<p>Sometimes, interview questions will involve &ldquo;order statistics&rdquo;, such as finding k-th smallest element in an array.
To do this, you select a random pivot and partition the array as you would in the Quicksort algorithm.
Then, based on the index of the pivot element, you know which half of the array contains the desired element.
For example: k=10 and n=20, if the first half contains 5 elements, then you should ignore the first half, and recursively process the second half with k=4 and n=14.
The runtime of this algorithm is O(n), not O(n log n), since the recursive call is only on one half of the array.</p>

<h4>Find median</h4>

<p>Find median is a special case of finding k-th smallest item.
You still have to implement finding k-th smallest helper function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">find_median</span><span class="p">(</span><span class="n">mlist</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Find the median of a given list of numbers.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">partition</span><span class="p">(</span><span class="n">alist</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="p">):</span>
</span><span class='line'>        <span class="n">pivot</span> <span class="o">=</span> <span class="n">alist</span><span class="p">[</span><span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="n">idx</span> <span class="o">=</span> <span class="n">lo</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">alist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">pivot</span><span class="p">:</span>
</span><span class='line'>                <span class="n">alist</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">alist</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">alist</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">alist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>                <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="c"># move the pivot</span>
</span><span class='line'>        <span class="n">alist</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">alist</span><span class="p">[</span><span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">alist</span><span class="p">[</span><span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">alist</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">idx</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">find_kth</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">lo</span> <span class="o">==</span> <span class="n">hi</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># empty list</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">lo</span> <span class="o">==</span> <span class="n">hi</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># singleton list</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">mlist</span><span class="p">[</span><span class="n">lo</span><span class="p">]</span> <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="n">lo</span> <span class="k">else</span> <span class="bp">None</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">p</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">p</span> <span class="o">==</span> <span class="n">k</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">mlist</span><span class="p">[</span><span class="n">p</span><span class="p">]</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">find_kth</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">hi</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">find_kth</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">length</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># if odd length</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">find_kth</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">length</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># if length is even</span>
</span><span class='line'>        <span class="n">first</span> <span class="o">=</span> <span class="n">find_kth</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">length</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>        <span class="n">second</span> <span class="o">=</span> <span class="n">find_kth</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">length</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">first</span><span class="o">+</span><span class="n">second</span><span class="p">)</span><span class="o">/</span><span class="mf">2.0</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Sorting Algorithms]]></title>
    <link href="http://tdongsi.github.io/python/blog/2016/08/30/tutorial-sorting-algorithms/"/>
    <updated>2016-08-30T21:23:48-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2016/08/30/tutorial-sorting-algorithms</id>
    <content type="html"><![CDATA[<p>Quick overview and implementations of the most common sorting algorithms.</p>

<p>Most updated implementations are in <a href="https://github.com/tdongsi/python/blob/master/CodeJam/practice/y2016/basic.py">this Python module</a>.</p>

<!-- more -->


<h3>Sorting algorithms</h3>

<h4>Overview of space/time complexity</h4>

<table>
<thead>
<tr>
<th> </th>
<th> Time Complexity (Avg/Worst) </th>
<th> Space Complexity </th>
<th> In-place/Stable? </th>
<th> Notes </th>
</tr>
</thead>
<tbody>
<tr>
<td> <strong>Heapsort</strong> </td>
<td>  O(n * log n) / O(n * log n) </td>
<td> O(1) </td>
<td> Yes/No </td>
<td> NA </td>
</tr>
<tr>
<td> <strong>Mergesort</strong> </td>
<td> O(n * log n) / O(n * log n).</td>
<td> O(n) </td>
<td> No/Yes </td>
<td> Space O(1) for doubly-linked list. </td>
</tr>
<tr>
<td> <strong>Quicksort</strong> </td>
<td> O(n * log n) / O(n * n) </td>
<td> O(1) </td>
<td> Yes/No </td>
<td> It is stable for linked-list. </td>
</tr>
<tr>
<td> <strong>Insertion sort</strong> </td>
<td> O(n * n) / O(n * n) </td>
<td> O(1) </td>
<td> Yes/Yes </td>
<td> Adaptive: quick for largely sorted list. Online. Efficient for small lists. </td>
</tr>
<tr>
<td> <strong>Selection sort</strong> </td>
<td> O(n * n) / O(n * n) </td>
<td> O(1) </td>
<td> Yes/No </td>
<td> Adaptive: similar to Insertion Sort. More comparisons. Less write operations. </td>
</tr>
<tr>
<td> <strong>Counting sort</strong> </td>
<td> O(n + k) / O(n + k) </td>
<td> O(1) </td>
<td> ?/? </td>
<td>  Not comparison-sort. For small range. </td>
</tr>
<tr>
<td> <strong>Radix sort</strong> </td>
<td> O(w * n) / O(w * n) </td>
<td> O(1) </td>
<td> Yes/Yes (some variants) </td>
<td>  Not comparison-sort. <em>w -> log n</em> for arbitrary range. </td>
</tr>
</tbody>
</table>


<p><br></p>

<p>Note that <strong>insertion sort</strong> still has its place even though it is not a <code>O(n * log n)</code> algorithm.
It is shown in practice that &ldquo;insertion sort&rdquo; is faster than other sorting algorithms for sufficiently small, mostly sorted lists.
A common application of &ldquo;insertion sort&rdquo; is in <strong>merge sort</strong> implementations where
&ldquo;merge sort&rdquo; calls its own internal &ldquo;insertion sort&rdquo; to sort small enough sub-lists before merging (instead of keeping recursing to singleton lists).</p>

<p><strong>Selection sort</strong> seems inferior to <strong>insertion sort</strong> as an O(n<sup>2</sup>) sorting algorithm in most cases.
However, selection sort will perform identically regardless of the order of the array (almost sorted or unsorted), which can be a plus in real-time application.
While selection sort is preferable to insertion sort in terms of number of writes (Θ(n) swaps versus Ο(n2) swaps), <strong>cycle sort</strong> is the most optimal in &ldquo;number of write&rdquo; metric (write can be expensive in some situations).</p>

<h4>How to approach sorting questions</h4>

<p>Simply using quick-sort for any sorting in algorithmic questions could fail you, since it shows inexperience.
Asking clarifying questions is key: sorting a very large list of integers can have different approach, depending on its input size, data structure, numeric range and distribution.</p>

<ul>
<li>Small range: O(n) with array-based map.</li>
<li>Medium range: O(wn) with radix sort.</li>
<li>Arbitrary number: O(n log n)</li>
</ul>


<p><strong>Example</strong>: &ldquo;Design an algorithm to sort a list&rdquo;.</p>

<ul>
<li>What kind of list? Array list or linked list? Array list.</li>
<li>What data in it? Numbers or characters or strings? Numbers.</li>
<li>Are numbers integers? Yes.</li>
<li>What range of numbers? Are they IDs or values of something? Ages of customers.</li>
<li>How many numbers? One million.</li>
</ul>


<p>Based on the answers above, the best solution is to use an array of size 200 to keep count of customers for a given age.
Size 200 is chosen because the oldest person is less than 200 years old.
You can see that the space and time complexity is much different from Merge-Sort when you know characteristics of input data.</p>

<h3>Merge Sort</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="n">mlist</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span>
</span><span class='line'>        <span class="n">alist</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">l_idx</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">r_idx</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="n">l_idx</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">left</span><span class="p">)</span> <span class="ow">and</span> <span class="n">r_idx</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">right</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">left</span><span class="p">[</span><span class="n">l_idx</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">[</span><span class="n">r_idx</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">alist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">left</span><span class="p">[</span><span class="n">l_idx</span><span class="p">])</span>
</span><span class='line'>                <span class="n">l_idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">alist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">right</span><span class="p">[</span><span class="n">r_idx</span><span class="p">])</span>
</span><span class='line'>                <span class="n">r_idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># append the rest</span>
</span><span class='line'>        <span class="n">alist</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">left</span><span class="p">[</span><span class="n">l_idx</span><span class="p">:])</span>
</span><span class='line'>        <span class="n">alist</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">right</span><span class="p">[</span><span class="n">r_idx</span><span class="p">:])</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">alist</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mlist</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">med</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class='line'>        <span class="n">left</span> <span class="o">=</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">mlist</span><span class="p">[:</span><span class="n">med</span><span class="p">])</span>
</span><span class='line'>        <span class="n">right</span> <span class="o">=</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">mlist</span><span class="p">[</span><span class="n">med</span><span class="p">:])</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Quick Sort</h3>

<p>One important characteristic of Quick Sort is in-place.
Naive implementation tends to ignore this, focusing on its divide-and-conquer strategy.
The standard implementation is as follows, but see <a href="http://tdongsi.github.io/python/blog/2016/08/31/tutorial-more-about-quick-sort/">this post</a> for more details.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">quicksort</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">lo</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">hi</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">partition</span><span class="p">(</span><span class="n">alist</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="p">):</span>
</span><span class='line'>        <span class="n">pivot</span> <span class="o">=</span> <span class="n">alist</span><span class="p">[</span><span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="n">idx</span> <span class="o">=</span> <span class="n">lo</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">alist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">pivot</span><span class="p">:</span>
</span><span class='line'>                <span class="n">alist</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">alist</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">alist</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">alist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>                <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="c"># move the pivot</span>
</span><span class='line'>        <span class="n">alist</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">alist</span><span class="p">[</span><span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">alist</span><span class="p">[</span><span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">alist</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">idx</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">hi</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">hi</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">lo</span> <span class="o">==</span> <span class="n">hi</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># empty list</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mlist</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">lo</span> <span class="o">==</span> <span class="n">hi</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># singleton list</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mlist</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="p">)</span>
</span><span class='line'>        <span class="n">quicksort</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'>        <span class="n">quicksort</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">hi</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mlist</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Heap Sort</h3>

<p>Straight from <code>heapq</code> module&rsquo;s documentation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">heap_sort</span><span class="p">(</span><span class="n">mlist</span><span class="p">):</span>
</span><span class='line'>    <span class="n">heapq</span><span class="o">.</span><span class="n">heapify</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">heapq</span><span class="o">.</span><span class="n">heappop</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">))]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Insertion Sort</h3>

<figure class='code'><figcaption><span>Insertion sort</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">insertion_sort</span><span class="p">(</span><span class="n">mlist</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mlist</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)):</span>
</span><span class='line'>        <span class="n">pos</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>        <span class="n">cur</span> <span class="o">=</span> <span class="n">mlist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="n">pos</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">cur</span> <span class="o">&lt;</span> <span class="n">mlist</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>            <span class="n">mlist</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">mlist</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="n">pos</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">mlist</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">cur</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">mlist</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Selection sort</h3>

<figure class='code'><figcaption><span>Selection sort</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">selection_sort</span><span class="p">(</span><span class="n">mlist</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="n">iMin</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">mlist</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">mlist</span><span class="p">[</span><span class="n">iMin</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">iMin</span> <span class="o">=</span> <span class="n">j</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">iMin</span> <span class="o">!=</span> <span class="n">i</span><span class="p">:</span>
</span><span class='line'>            <span class="n">mlist</span><span class="p">[</span><span class="n">iMin</span><span class="p">],</span> <span class="n">mlist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">mlist</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">mlist</span><span class="p">[</span><span class="n">iMin</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">mlist</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Counting Sort</h3>

<p>Based on <a href="https://www.youtube.com/watch?v=Nz1KZXbghj8&amp;t=1925s">this lecture</a>.</p>

<figure class='code'><figcaption><span>Counting Sort</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">counting_sort</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Counting sort</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param mlist: List of items.</span>
</span><span class='line'><span class="sd">    :param k: Maximum range of key [0,k)</span>
</span><span class='line'><span class="sd">    :param key: function to get key of item. (for radix sort)</span>
</span><span class='line'><span class="sd">    :return:</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">k</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">k</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">key</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">key</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">counter</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">k</span><span class="p">)]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)):</span>
</span><span class='line'>        <span class="n">counter</span><span class="p">[</span><span class="n">key</span><span class="p">(</span><span class="n">mlist</span><span class="p">[</span><span class="n">i</span><span class="p">])]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">mlist</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">output</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">k</span><span class="p">):</span>
</span><span class='line'>        <span class="n">output</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">counter</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">output</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Radix Sort</h3>

<p>Use <code>counting_sort</code> in the last section as the subroutine.
See <a href="https://www.youtube.com/watch?v=Nz1KZXbghj8&amp;t=1925s">here</a>.</p>

<figure class='code'><figcaption><span>Radix sort</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">radix_sort</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">w</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="n">RADIX</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Find the max length</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">w</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">temp</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span>
</span><span class='line'>        <span class="n">w</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">temp</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="n">w</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">temp</span> <span class="o">//=</span> <span class="n">RADIX</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">output</span> <span class="o">=</span> <span class="n">mlist</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">digit</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">w</span><span class="p">):</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">my_key</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">digit</span><span class="p">):</span>
</span><span class='line'>                <span class="n">num</span> <span class="o">//=</span> <span class="n">RADIX</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">num</span> <span class="o">%</span> <span class="n">RADIX</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">output</span> <span class="o">=</span> <span class="n">counting_sort</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">RADIX</span><span class="p">,</span> <span class="n">my_key</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># print(output)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">output</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Testing sorting algorithms</h3>

<p>Codes to verify your sorting algorithm.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">your_module.your_sort_impl</span> <span class="kn">as</span> <span class="nn">do_sort</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestSorting</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_sort</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># import sorting function as do_sort</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">20</span><span class="p">):</span>
</span><span class='line'>            <span class="c"># Do it 5 times</span>
</span><span class='line'>            <span class="n">expected</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
</span><span class='line'>                <span class="n">mlist</span> <span class="o">=</span> <span class="n">expected</span><span class="p">[:]</span>
</span><span class='line'>                <span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span>
</span><span class='line'>                <span class="c"># print mlist</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">do_sort</span><span class="p">(</span><span class="n">mlist</span><span class="p">),</span> <span class="n">expected</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_same_element</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">do_sort</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">]),</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">do_sort</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]),</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">do_sort</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]),</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">do_sort</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">]),</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">do_sort</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]),</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'>        <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 2 Quick Recap]]></title>
    <link href="http://tdongsi.github.io/python/blog/2016/07/02/python-quick-recap/"/>
    <updated>2016-07-02T00:23:27-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2016/07/02/python-quick-recap</id>
    <content type="html"><![CDATA[<p>What to review before a Python interview.
This blog post focuses on Python 2.7.
Python 3 should be discussed in another blog post.</p>

<!--more-->


<h3>Basic</h3>

<ol>
<li><a href="https://docs.python.org/2.7/tutorial/">Python tutorial</a>: especially <a href="https://docs.python.org/2.7/tutorial/classes.html">&ldquo;Classes&rdquo;</a> and two <a href="https://docs.python.org/2.7/tutorial/stdlib.html">&ldquo;Brief Tour of Standard Library&rdquo;</a> sections.</li>
<li><a href="https://pyformat.info/">String format</a> if you expect lots of string processing.</li>
<li><a href="http://tdongsi.github.io/python/blog/2016/09/05/tutorial-protocols/">Protocols</a>.</li>
</ol>


<h3>Python decorator</h3>

<p>Python decorator is a callable that takes a function as argument and returns a replacement function.</p>

<figure class='code'><figcaption><span>Example decorator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">outer</span><span class="p">(</span><span class="n">some_func</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">def</span> <span class="nf">inner</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>         <span class="k">print</span> <span class="s">&quot;before some_func&quot;</span>
</span><span class='line'><span class="o">...</span>         <span class="n">ret</span> <span class="o">=</span> <span class="n">some_func</span><span class="p">()</span> <span class="c"># 1</span>
</span><span class='line'><span class="o">...</span>         <span class="k">return</span> <span class="n">ret</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">inner</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">decorated</span> <span class="o">=</span> <span class="n">outer</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span> <span class="c"># 2</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">decorated</span><span class="p">()</span>
</span><span class='line'><span class="n">before</span> <span class="n">some_func</span>
</span><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python 2.4 provided support to wrap a function in a decorator by pre-pending the function definition with a decorator name and the @ symbol.</p>

<figure class='code'><figcaption><span>A generic decorator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">logger</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span> <span class="c">#1</span>
</span><span class='line'><span class="o">...</span>         <span class="k">print</span> <span class="s">&quot;Arguments were: </span><span class="si">%s</span><span class="s">, </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>         <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span> <span class="c">#2</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">inner</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nd">@logger</span>
</span><span class='line'><span class="o">...</span> <span class="k">def</span> <span class="nf">foo1</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that decorators implemented as functions above are stateless.
For stateful decorators (e.g., counter), they should be implemented as a class (see <a href="http://scottlobdell.me/2015/04/decorators-arguments-python/">here</a>).</p>

<h4>Reference</h4>

<p>RECOMMENDED:</p>

<ul>
<li><a href="http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/">Decorator tutorial</a></li>
<li><a href="http://scottlobdell.me/2015/04/decorators-arguments-python/">Decorator with arguments</a></li>
</ul>


<p>EXTRA READING:</p>

<ul>
<li><a href="https://github.com/yihtserns/groovy-decorator">Python-inspired decorator in Groovy</a></li>
<li><a href="https://wiki.python.org/moin/PythonDecoratorLibrary">Decorator library</a></li>
</ul>


<h3>Python generator</h3>
]]></content>
  </entry>
  
</feed>
