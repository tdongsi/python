<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/python/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/python/"/>
  <updated>2018-09-03T02:07:50-07:00</updated>
  <id>http://tdongsi.github.io/python/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Effective Python Pt. 5: Concurrency and Parallelism]]></title>
    <link href="http://tdongsi.github.io/python/blog/2018/08/18/effective-python-pt-5-concurrency-and-parallelism/"/>
    <updated>2018-08-18T16:24:30-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2018/08/18/effective-python-pt-5-concurrency-and-parallelism</id>
    <content type="html"><![CDATA[<p>This post corresponds to Lesson 4 &ldquo;Using Classes&rdquo; of <a href="https://www.safaribooksonline.com/videos/effective-python/9780134175249">&ldquo;Effective Python&rdquo; course</a>.</p>

<!--more-->


<h3>Item 23: Use subprocess to manage child processes</h3>

<figure class='code'><figcaption><span>Piping data from Python data to subprocess</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># You can pipe data from Python program to subprocess</span>
</span><span class='line'><span class="c"># In this way, you can call other programs to run in parallel with Python process.</span>
</span><span class='line'><span class="c"># Run sub-processes on multiple CPUs.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">run_openssl</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;A computing-intensive method, best for running separately on separate CPUs.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">env</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>    <span class="n">env</span><span class="p">[</span><span class="s">&#39;password&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;asdf&#39;</span>
</span><span class='line'>    <span class="n">proc</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span>
</span><span class='line'>        <span class="p">[</span><span class="s">&#39;openssl&#39;</span><span class="p">,</span> <span class="s">&#39;enc&#39;</span><span class="p">,</span> <span class="s">&#39;-des3&#39;</span><span class="p">,</span> <span class="s">&#39;-pass&#39;</span><span class="p">,</span> <span class="s">&#39;env:password&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="n">env</span><span class="o">=</span><span class="n">env</span><span class="p">,</span>
</span><span class='line'>        <span class="n">stdin</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span>
</span><span class='line'>        <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">proc</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="n">proc</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">proc</span>
</span><span class='line'>
</span><span class='line'><span class="n">procs</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">urandom</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>    <span class="n">proc</span> <span class="o">=</span> <span class="n">run_openssl</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="n">procs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">proc</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">proc</span> <span class="ow">in</span> <span class="n">procs</span><span class="p">:</span>
</span><span class='line'>    <span class="n">out</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">proc</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Piping data from one subprocess to another</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Subprocess timeout in Python 3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Python 3 way</span>
</span><span class='line'><span class="n">proc</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s">&#39;sleep&#39;</span><span class="p">,</span> <span class="s">&#39;10&#39;</span><span class="p">])</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">proc</span><span class="o">.</span><span class="n">communicate</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">TimeoutExpired</span><span class="p">:</span>
</span><span class='line'>    <span class="n">proc</span><span class="o">.</span><span class="n">terminate</span><span class="p">()</span>
</span><span class='line'>    <span class="n">proc</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;Exit status&#39;</span><span class="p">,</span> <span class="n">proc</span><span class="o">.</span><span class="n">poll</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s not available in Python 2, and if you want to reproduce its functionality in Python 2, you actually have to use the <code>select</code> module and poll the input and output file descriptors of the subprocess.
It is a little bit more complicated and it&rsquo;s hard to get right.</p>

<figure class='code'><figcaption><span>Stop-gap alternative in Python 2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Command</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Stop-gap alternative for subprocess&#39;s timeout in Python 3.</span>
</span><span class='line'><span class="sd">    Based on https://stackoverflow.com/questions/1191374/using-module-subprocess-with-timeout</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">process</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">process</span> <span class="o">=</span> <span class="n">process</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">timeout</span><span class="p">):</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">target</span><span class="p">():</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">process</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">thread</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">target</span><span class="p">)</span>
</span><span class='line'>        <span class="n">thread</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">thread</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">timeout</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">thread</span><span class="o">.</span><span class="n">is_alive</span><span class="p">():</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;Terminating process&#39;</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">process</span><span class="o">.</span><span class="n">terminate</span><span class="p">()</span>
</span><span class='line'>            <span class="n">thread</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">process</span><span class="o">.</span><span class="n">returncode</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">proc</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s">&#39;sleep&#39;</span><span class="p">,</span> <span class="s">&#39;2&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">command</span> <span class="o">=</span> <span class="n">Command</span><span class="p">(</span><span class="n">proc</span><span class="p">)</span>
</span><span class='line'><span class="n">command</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># NOTE: the following will not work since the subprocess already ran.</span>
</span><span class='line'><span class="c"># command = Command(proc)</span>
</span><span class='line'><span class="n">command</span> <span class="o">=</span> <span class="n">Command</span><span class="p">(</span><span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s">&#39;sleep&#39;</span><span class="p">,</span> <span class="s">&#39;2&#39;</span><span class="p">]))</span>
</span><span class='line'><span class="n">command</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Item 24: Use threads for blocking I/O, NOT for parallelism</h3>

<p>Python has the GIL, or Global Interpreter Lock.
It means that only one Python thread will ever actually run at a time.
A common mistake is to use threads to speed up a computation-intensive program in Python.
You will be usually disappointed and end up with similar, if not worse, performance.
In other words, you might find that your complicated parallel version will have similar performance as the serial one.</p>

<p>In Python, threads are good for two main use cases.
The first use case is, if you want something looks running simultaneously (concurrency).
A common example is to respond to user inputs while doing network I/O.
In this case, the threads will cooperate with each other to obtain GIL fairly.
The second use case for threads in Python is for (blocking) I/O such as network, system calls.
A common example is to use threads to query multiple REST endpoints concurrently.
The following example illustrate such use case:</p>

<figure class='code'><figcaption><span>Use Python threads for network I/O</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">threading</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_response</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="o">.</span><span class="n">status_code</span><span class="p">,</span> <span class="n">r</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">RequestThread</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">RequestThread</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_url</span> <span class="o">=</span> <span class="n">url</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">output</span> <span class="o">=</span> <span class="n">get_response</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_url</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">urls</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;https://www.google.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://www.facebook.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://www.apple.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://www.netflix.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://www.salesforce.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://www.intuit.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://www.amazon.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://www.uber.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://www.lyft.com&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">threads</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">urls</span><span class="p">:</span>
</span><span class='line'>    <span class="n">thread</span> <span class="o">=</span> <span class="n">RequestThread</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="n">thread</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>    <span class="n">threads</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">thread</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">thread</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
</span><span class='line'>    <span class="n">thread</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>TODO: Explain GIL and under the cover, <code>request</code> release the control of GIL.</p>

<p>TODO: mistake</p>

<p>TODO: Note about how to call constructor.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Python Pt. 4: Using Classes]]></title>
    <link href="http://tdongsi.github.io/python/blog/2018/08/12/effective-python-part-4/"/>
    <updated>2018-08-12T00:19:36-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2018/08/12/effective-python-part-4</id>
    <content type="html"><![CDATA[<p>This post corresponds to Lesson 4 &ldquo;Using Classes&rdquo; of <a href="https://www.safaribooksonline.com/videos/effective-python/9780134175249">&ldquo;Effective Python&rdquo; course</a>.</p>

<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Python Pt. 3: Functions]]></title>
    <link href="http://tdongsi.github.io/python/blog/2018/08/12/effective-python-part-3/"/>
    <updated>2018-08-12T00:19:32-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2018/08/12/effective-python-part-3</id>
    <content type="html"><![CDATA[<p>This post corresponds to Lesson 3 &ldquo;Using Functions&rdquo; of <a href="https://www.safaribooksonline.com/videos/effective-python/9780134175249">&ldquo;Effective Python&rdquo; course</a>.</p>

<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Python Pt. 2: Comprehensions & Generators]]></title>
    <link href="http://tdongsi.github.io/python/blog/2018/08/12/effective-python-part-2/"/>
    <updated>2018-08-12T00:19:30-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2018/08/12/effective-python-part-2</id>
    <content type="html"><![CDATA[<p>This post corresponds to Lesson 2 &ldquo;Comprehensions &amp; Generators&rdquo; of <a href="https://www.safaribooksonline.com/videos/effective-python/9780134175249">&ldquo;Effective Python&rdquo; course</a>.</p>

<!--more-->


<h3>Item 8: Use list comprehension instead of MAP and FILTER</h3>

<p>List comprehension offers the more intuitive way to transform a list to another list.
Note that in Python 3, the <code>map</code> function now returns an iterator instead of a list like Python 2.
Therefore, you have to add an extra step to convert to a list.</p>

<figure class='code'><figcaption><span>List comprehension</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="c"># Recommended</span>
</span><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="c"># Old way: map in Python 2</span>
</span><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="c"># Old way: map in Python 3</span>
</span><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">a</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In addition, list comprehension makes it easy to add a condition for filtering.
Using <code>filter</code> and <code>map</code>, it becomes very &ldquo;noisy&rdquo; with multiple enclosing functions and lambdas, as shown below.</p>

<figure class='code'><figcaption><span>List comprehension with filtering</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="c"># Recommended</span>
</span><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">b</span> <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="c"># Old way in Python 2</span>
</span><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="n">b</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dictionary and set also have similar comprehension expressions for similar purposes.
The final note is that for very complex transformations and filtering that is not easy to pack into comprehension expressions, it is recommended to explicitly use the <code>for</code> loop instead.</p>

<h3>Item 9: Avoid more than two expressions in list comprehensions</h3>

<p>As examples, the transformations of two-dimensional matrices can be done easily with list comprehensions, as follows.</p>

<figure class='code'><figcaption><span>Transforming matrices</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">matrix</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]]</span>
</span><span class='line'><span class="n">flatten</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">matrix</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">row</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">flatten</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">squared</span> <span class="o">=</span> <span class="p">[[</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">row</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">matrix</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">squared</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, for 3D (or more) matrices, such approach with list comprehensions can be really hard to read.</p>

<figure class='code'><figcaption><span>3D matrix</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 3D matrix</span>
</span><span class='line'><span class="n">matrix</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]],</span>
</span><span class='line'>    <span class="p">[[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">]]</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="n">flatten</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">sublist1</span> <span class="ow">in</span> <span class="n">matrix</span>
</span><span class='line'>           <span class="k">for</span> <span class="n">sublist2</span> <span class="ow">in</span> <span class="n">sublist1</span>
</span><span class='line'>           <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">sublist2</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">flatten</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As shown above, even a simple transformation of matrix flattening can make the code hard to read due to multiple levels of <code>for</code> loops.
Instead of using list comprehensions in those cases, it is recommended to explicitly use <code>for</code> loops when there are more than two expressions in such list comprehensions.</p>

<figure class='code'><figcaption><span>3D matrix</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Recommended way</span>
</span><span class='line'><span class="n">flatten</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">sublist1</span> <span class="ow">in</span> <span class="n">matrix</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">sublist2</span> <span class="ow">in</span> <span class="n">sublist1</span><span class="p">:</span>
</span><span class='line'>        <span class="n">flatten</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">sublist2</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">flatten</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another example of abusing list comprehension is to perform multiple filtering operations, such as:</p>

<figure class='code'><figcaption><span>Multiple filtering operations</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">matrix</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]]</span>
</span><span class='line'><span class="n">filtered</span> <span class="o">=</span> <span class="p">[[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">row</span> <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">matrix</span> <span class="k">if</span> <span class="nb">sum</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">10</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">filtered</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, the expression performs filtering not only on rows in the matrix but also on elements in rows.
Such expressions are really hard to understand since the code is not read in the natural order of logic and flow of thoughts (see <a href="https://en.wikipedia.org/wiki/Literate_programming">literate programming</a>).
It is recommended to explicitly use <code>for</code> loops for such cases.</p>

<h3>Item 10: Consider generator expressions for large comprehensions</h3>

<p>The problems with list comprehensions are that they may create a whole new list containing all the data.
For large inputs, it can consume a significant amount of memory and can even crash your program.</p>

<p>For a (very contrived) example, let&rsquo;s say you want to return the length of each line in a file and its squares.
You can easily achieve that with the following list comprehensions.</p>

<figure class='code'><figcaption><span>List comprehension on a file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/tmp/my_file.txt&#39;</span><span class="p">)]</span>
</span><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">better</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, list comprehension on a file like this is very risky.
The file can be really large or even never ending (such as a network socket).
To solve this problem, Python has generator expressions, which are a generalization of comprehensions and generators.
A generator expression gives you an iterator that you can go through that will yield one item at a time from the input and you can determine how many output items you want to return.
The above code can be rewritten as follows:</p>

<figure class='code'><figcaption><span>Generator expression</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">better</span> <span class="o">=</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/tmp/my_file.txt&#39;</span><span class="p">))</span>
</span><span class='line'><span class="n">roots</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="o">**</span><span class="mf">0.5</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">better</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">roots</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">better</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">roots</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c">### Example Output</span>
</span><span class='line'><span class="p">[</span><span class="mi">37</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">44</span><span class="p">]</span>
</span><span class='line'><span class="p">(</span><span class="mi">37</span><span class="p">,</span> <span class="mi">1369</span><span class="p">)</span>
</span><span class='line'><span class="mi">20</span>
</span><span class='line'><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="mi">3600</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, another powerful outcome of using generator expressions is that they can be composed together.
When you call <code>next(roots)</code>, Python goes back up to the generator expression <code>better</code>, then realizes that it has to read another line out of the file.
It has to read the line, then compute its length.
That length value is then passed back to <code>roots</code> as <code>x</code> and for computing the tuple.
What&rsquo;s surprising is that chaining generators like this actually executes very quickly in Python.
When you&rsquo;re looking for a way to compose functionallity that&rsquo;s operating on a large stream of input, generator expressions are one of the best tools for the job.</p>

<h3>Item 11: Consider generator functions instead of returning lists</h3>

<p>Let&rsquo;s say you want to find the index of every single words in a string.
The typical approach will be something as follows:</p>

<figure class='code'><figcaption><span>Typical way</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">index_words_typical</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">text</span><span class="p">:</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">letter</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">letter</span> <span class="o">==</span> <span class="s">&#39; &#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>The typical approach that returns a list of indices has a problem.
It is dense and noisy with all logistics related to <code>result</code> list: initializing the list, appending to the list whenever a result is found.
A better way to write this function is to use a generator function, with <code>yield</code> statements, as follows:</p>

<figure class='code'><figcaption><span>Better way</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">index_words</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">text</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">letter</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">letter</span> <span class="o">==</span> <span class="s">&#39; &#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="k">yield</span> <span class="n">index</span><span class="o">+</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Equivalent outputs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">address</span> <span class="o">=</span> <span class="s">&#39;The quick brown fox jumps over the lazy dog&#39;</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">index_words</span><span class="p">(</span><span class="n">address</span><span class="p">)))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">index_words_typical</span><span class="p">(</span><span class="n">address</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Output</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">40</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">40</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the generator version of this function is much easier to read than the typical version that returns lists.
Most significantly, all of the interactions with the <code>result</code> list have been taken away.
Instead, you just have those <code>yield</code> statements, making it very obvious what is being returned.
That helps make it clear to new readers of the code.</p>

<p>The second problem of the typical approach is that it requires all results to be sotred in the lists before being returned.
For huge inputs, this can cause your program to run out of memory and crash.
In contrast, the generator version of the function can handle any amount of output because it doesn&rsquo;t actually keep all of the results in memory that it found.
In the example above, if the input <code>address</code> is a huge text and you only need to display the first hundred indices, the typical approach <code>index_words_typical</code> might fail while the generator version works perfectly fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Python Pt. 1: Expressions and Statements]]></title>
    <link href="http://tdongsi.github.io/python/blog/2018/08/12/effective-python-part-1/"/>
    <updated>2018-08-12T00:19:06-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2018/08/12/effective-python-part-1</id>
    <content type="html"><![CDATA[<p>This post corresponds to Lesson 1 &ldquo;Using Expressions and Statements&rdquo; of <a href="https://www.safaribooksonline.com/videos/effective-python/9780134175249">&ldquo;Effective Python&rdquo; course</a>.</p>

<!--more-->


<h3>Item 1: Slice sequences</h3>

<p>Use <code>mlist[start:end]</code>.</p>

<p>1) Note that <code>a[:20]</code> or <code>a[-20:]</code> will quietly return the full list even when the list is smaller in size.
Meanwhile, <code>a[20]</code> or <code>a[-20]</code> will throw IndexError exception.
It could be pro or con, depending on the situation and if the programmer is aware of it.</p>

<p>2) Slice assignment can be used to truncate the list in the middle. Example: <code>a[2:7] = []</code>.</p>

<p><code>b=a[:]</code> is the idiom to create a copy of a list.</p>

<p>3) Be careful with the following idiom to get the last <code>n</code> items of the list.</p>

<figure class='code'><figcaption><span>WRONG: For input n, return the last n items from list</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="k">print</span> <span class="n">mlist</span><span class="p">[</span><span class="o">-</span><span class="n">n</span><span class="p">:]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code works in most cases. However, if <code>n</code> takes the value of 0, then it will return the whole list.</p>

<h3>Item 2: Avoid using start, end, and stride in a single slice</h3>

<p>Sequences can be sliced with the following syntax <code>a[start:end:stride]</code>.</p>

<p>1) <code>a[::-1]</code> is the common idiom to reverse a sequence. However, be careful when using the idiom with string, esepcially UTF-8 string.</p>

<figure class='code'><figcaption><span>WRONG: Reverse UTF-8 string</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">w</span> <span class="o">=</span> <span class="s">&#39;hello&#39;</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">w</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="n">z</span> <span class="o">=</span> <span class="n">y</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, if the input <code>w='谢谢'</code> with non-ASCII characters, <code>UnicodeDecodeError</code> might be thrown.</p>

<p>2) The author cautions against using all <code>start:end:stride</code> in a slice since it will be very confusing, especially with negative numbers.
For example, <code>a[-2:2:-2]</code> is very unintuitive to figure out which items will be selected.
The best practices are:</p>

<ol>
<li>If you must use stride, use positive number only.</li>
<li>Split <code>start:end:stride</code> into two operations: stride first <code>b=a[::-2]</code>, followed by truncation <code>c=b[-2:2]</code>. The order can be changed to get smallest intermediate subsequence.</li>
</ol>


<h3>Item 3: Prefer <code>enumerate</code> over <code>range</code></h3>

<p>Instead of <code>for</code> loop over <code>range(len(mlist))</code> to get the index, use this:</p>

<figure class='code'><figcaption><span>enumerate example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">idx</span><span class="p">,</span> <span class="n">item</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Item 4: Use <code>zip</code> to process iterators in parallel</h3>

<figure class='code'><figcaption><span>Example of zip</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;Kelly&#39;</span><span class="p">,</span> <span class="s">&#39;Lise&#39;</span><span class="p">,</span> <span class="s">&#39;Marie&#39;</span><span class="p">,</span> <span class="s">&#39;Alexander&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">letters</span> <span class="o">=</span> <span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">names</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Better way: use zip</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">better_way</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">names</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># In Python2, zip returns a list instead of a generator.</span>
</span><span class='line'>    <span class="k">print</span> <span class="nb">zip</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">names</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># In Python3, the above will print some &quot;&lt;zip object at 0x12345&gt;&quot;.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># To get something similar to Python3,</span>
</span><span class='line'>    <span class="c"># Use izip in itertools</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">python3_way</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">names</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">python3_way</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">names</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Find the longest name&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">izip</span>
</span><span class='line'>    <span class="n">longest_name</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>    <span class="n">current_max</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">length</span><span class="p">,</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">izip</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">names</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">length</span> <span class="o">&gt;</span> <span class="n">current_max</span><span class="p">:</span>
</span><span class='line'>            <span class="n">current_max</span> <span class="o">=</span> <span class="n">length</span>
</span><span class='line'>            <span class="n">longest_name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">longest_name</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">better_way</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">names</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Find the longest name&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">longest_name</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>    <span class="n">current_max</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">length</span><span class="p">,</span> <span class="n">name</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">names</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">length</span> <span class="o">&gt;</span> <span class="n">current_max</span><span class="p">:</span>
</span><span class='line'>            <span class="n">current_max</span> <span class="o">=</span> <span class="n">length</span>
</span><span class='line'>            <span class="n">longest_name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">longest_name</span>
</span></code></pre></td></tr></table></div></figure>


<p>1) Note that, in Python2, <code>zip</code> returns a list instead of a generator object like in Python3.
To simulate that behavior in Python3, use <code>izip</code> from <code>itertools</code> module.</p>

<p>2) The default behavior of <code>zip</code> is to stop after reaching the end of the shortest iterator.
To iterate until the end of the longest iterator, use <code>itertools.zip_longest</code> in Python3 and <code>itertools.izip_longest</code> in Python2.</p>

<h3>Item 5: Avoid <code>else</code> blocks after <code>for</code> and <code>while</code> loops</h3>

<p>If you don&rsquo;t know that you can add an <code>else</code> block after <code>for</code> or <code>while</code> loops, you&rsquo;re better off that way.
The <code>else</code> block after loops are really confusing to all programmers who write or read the code.</p>

<p>The <code>else</code> block is originally intended for searching something in a loop, break if the search fails.
However, the name <code>else</code> is probably extremely poor choice, given the semantics of <code>else</code> in other constructs such as <code>if</code> or <code>try</code>.
Because of that, it is clearer to simply write a helper function before checking in a loop.</p>

<h3>Item 6: Take advantage of each block in <code>try</code>/<code>except</code>/<code>else</code>/<code>finally</code></h3>

<figure class='code'><figcaption><span>Function of each block</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Main action&quot;</span>
</span><span class='line'><span class="k">except</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Handle exception&quot;</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;When there is no exception&quot;</span>
</span><span class='line'><span class="k">finally</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Always&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>1) In Python 3, reading and writing Unicode to file is simple.
In Python2, you have to use <code>io</code> module.
In addition, the string is not Unicode by default.
You have to mark Unicode literals with prefix u (e.g., u’Hello’).</p>

<figure class='code'><figcaption><span>Unicode read/write in Python3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">handle</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/tmp/random_data.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">handle</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;success</span><span class="se">\n</span><span class="s">and</span><span class="se">\n</span><span class="s">new</span><span class="se">\n</span><span class="s">lines&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">handle</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">handle</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/tmp/random_data.txt&#39;</span><span class="p">)</span>  <span class="c"># Raise IOError</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">handle</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>   <span class="c"># Raise UnicodeDecodeError</span>
</span><span class='line'><span class="k">finally</span><span class="p">:</span>
</span><span class='line'>    <span class="n">handle</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Unicode read/write in Python2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">io</span>
</span><span class='line'>
</span><span class='line'><span class="n">handle</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;/tmp/random_data.txt&#39;</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">&#39;w&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">handle</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">u&#39;success</span><span class="se">\n</span><span class="s">and</span><span class="se">\n</span><span class="s">new</span><span class="se">\n</span><span class="s">lines&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">handle</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">handle</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;/tmp/random_data.txt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>  <span class="c"># Raise IOError</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">handle</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>   <span class="c"># Raise UnicodeDecodeError</span>
</span><span class='line'><span class="k">finally</span><span class="p">:</span>
</span><span class='line'>    <span class="n">handle</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>2) The above code is the correct way to handle file opening/closing.
One common mistake is as follows:</p>

<figure class='code'><figcaption><span>WRONG: Common mistake in file handling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">handle</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;/tmp/bad_path.txt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>  <span class="c"># Raise IOError</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">handle</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>   <span class="c"># Raise UnicodeDecodeError</span>
</span><span class='line'><span class="k">finally</span><span class="p">:</span>
</span><span class='line'>    <span class="n">handle</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>   <span class="c"># Raise IOError</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this code, in the event of file can&rsquo;t be opened, an IOError exception will be thrown.
However, after the exception is handled, in the <code>finally</code> block, another exception will be thrown since file is not open and <code>handle</code> is <code>None</code>.
This exception is now unexpected and can&rsquo;t be handled properly.
Instead of committing the above mistake, we should open the file outside the <code>try</code> block and if file opening fails, finish code execution since we can&rsquo;t really do anything without file open.
If you want to explicitly handle IOError exception, enclose it with another <code>try</code> block.</p>

<h3>Item 7: Consider context manager (contextlib) and <code>with</code> statements for <code>finally</code> behavior</h3>

<figure class='code'><figcaption><span>Context manager example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">logging</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">contextlib</span> <span class="kn">import</span> <span class="n">contextmanager</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@contextmanager</span>
</span><span class='line'><span class="k">def</span> <span class="nf">swallow_exception</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Ignore exception of the given class&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">cls</span><span class="p">:</span>
</span><span class='line'>        <span class="n">logging</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="s">&#39;Swallow exception&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="k">with</span> <span class="n">swallow_exception</span><span class="p">(</span><span class="ne">ZeroDivisionError</span><span class="p">):</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="mi">20</span> <span class="o">/</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Context manager example with handle return</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@contextmanager</span>
</span><span class='line'><span class="k">def</span> <span class="nf">log_level</span><span class="p">(</span><span class="n">level</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Get logger of the specified name and level&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">old_level</span> <span class="o">=</span> <span class="n">logger</span><span class="o">.</span><span class="n">getEffectiveLevel</span><span class="p">()</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">setLevel</span><span class="p">(</span><span class="n">level</span><span class="p">)</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">logger</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="n">setLevel</span><span class="p">(</span><span class="n">old_level</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="k">with</span> <span class="n">log_level</span><span class="p">(</span><span class="n">logging</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">,</span> <span class="s">&#39;mylogger&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">logger</span><span class="p">:</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&#39;test&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">logging</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&#39;Global logger: test&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 3 Quick Recap]]></title>
    <link href="http://tdongsi.github.io/python/blog/2017/08/13/python-3-quick-recap/"/>
    <updated>2017-08-13T23:49:57-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2017/08/13/python-3-quick-recap</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Requests Cookbook]]></title>
    <link href="http://tdongsi.github.io/python/blog/2017/08/06/requests-cookbook/"/>
    <updated>2017-08-06T23:17:25-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2017/08/06/requests-cookbook</id>
    <content type="html"><![CDATA[<p><code>requests</code> module is a simple HTTP client library in Python.</p>

<!-- more -->


<h3>Example: BART parking</h3>

<p>The problem is discussed <a href="http://tdongsi.github.io/blog/2016/10/30/automated-downloading-bart-parking-permits/">here</a>.
The <code>requests</code>&rsquo;s code snippets can be found <a href="https://github.com/tdongsi/bart-parking/blob/develop/python/bart.py">here</a>.</p>

<p>Featuring:</p>

<ul>
<li>Login with CSRF protection (with POST)</li>
<li>Cookie retrieval and usage</li>
<li>Binary download and saved to file.</li>
</ul>


<figure class='code'><figcaption><span>Different payload for POST</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># POST /bart/users/login/ HTTP/1.1</span>
</span><span class='line'><span class="c"># Content-Type: application/x-www-form-urlencoded</span>
</span><span class='line'><span class="n">HEADERS</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;Referer&quot;</span><span class="p">:</span> <span class="s">&quot;https://www.select-a-spot.com/bart/&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">params</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;username&quot;</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;password&quot;</span><span class="p">:</span> <span class="n">password</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;csrfmiddlewaretoken&quot;</span><span class="p">:</span> <span class="n">r</span><span class="o">.</span><span class="n">cookies</span><span class="p">[</span><span class="s">&quot;csrftoken&quot;</span><span class="p">],</span>
</span><span class='line'>            <span class="s">&quot;login&quot;</span><span class="p">:</span> <span class="s">&quot;Login&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&quot;https://www.select-a-spot.com/bart/users/login/&quot;</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">HEADERS</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">params</span><span class="p">,</span> <span class="n">allow_redirects</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># POST /kafka/topic HTTP/1.1</span>
</span><span class='line'><span class="c"># Content-Type: application/json</span>
</span><span class='line'><span class="n">my_data</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="n">IOT_TOPIC</span><span class="p">,</span> <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;/types/com.prod.emp&#39;</span><span class="p">}</span>
</span><span class='line'><span class="n">my_header</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;Accept&#39;</span><span class="p">:</span> <span class="s">&#39;application/json&#39;</span><span class="p">,</span> <span class="s">&#39;Content-Type&#39;</span><span class="p">:</span> <span class="s">&#39;application/json&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;POST: </span><span class="si">%s</span><span class="s">&#39;</span><span class="p">,</span> <span class="n">TOPIC_ENDPOINT</span><span class="p">)</span>
</span><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">TOPIC_ENDPOINT</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">my_header</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">my_data</span><span class="p">),</span> <span class="n">cert</span><span class="o">=</span><span class="n">KAFKA_CERTS</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that <code>json.dumps</code> is required for POST-ing JSON data. The typical service response:</p>

<figure class='code'><figcaption><span>Error message</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"exception":"org.springframework.http.converter.HttpMessageNotReadableException","message":"Bad Request"</span></code></pre></td></tr></table></div></figure>


<h3>SSL authentication</h3>

<p>You can specify your certificate and private key in <code>cert=(my_cert, my_key)</code> as a method parameter.
The certificate authority can be optionally specified (<code>s.verify = MY_CA</code>) or not (<code>s.verify = False</code>).</p>

<figure class='code'><figcaption><span>SSL authentication</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">test_kafka</span><span class="p">(</span><span class="n">my_cert</span><span class="p">,</span> <span class="n">my_key</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Top level function to test_kafka.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param my_cert: path to certificate.</span>
</span><span class='line'><span class="sd">    :param my_key: path to private key corresponding to the certificate.</span>
</span><span class='line'><span class="sd">    :return:</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ZOOKEEPER_EP</span> <span class="o">=</span> <span class="s">&#39;https://kafka-prd.corp.net:9090&#39;</span>
</span><span class='line'>    <span class="n">IOT_NAMESPACE</span> <span class="o">=</span> <span class="s">&#39;test&#39;</span>
</span><span class='line'>    <span class="n">MY_CA</span> <span class="o">=</span> <span class="s">&#39;download/ca.crt&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">verify</span> <span class="o">=</span> <span class="n">MY_CA</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_namespace</span><span class="p">():</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot; Test querying kafka namespace.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        Basically: curl -k -E ./kafka.p12:password &quot;https://kafka.prd:9090/namespaces/test&quot;</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">NAMESPACE_PATH</span> <span class="o">=</span> <span class="s">&#39;/namespaces&#39;</span>
</span><span class='line'>        <span class="n">endpoint</span> <span class="o">=</span> <span class="n">ZOOKEEPER_EP</span> <span class="o">+</span> <span class="n">NAMESPACE_PATH</span> <span class="o">+</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="n">IOT_NAMESPACE</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;GET: </span><span class="si">%s</span><span class="s">&#39;</span><span class="p">,</span> <span class="n">endpoint</span><span class="p">)</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">endpoint</span><span class="p">,</span> <span class="n">cert</span><span class="o">=</span><span class="p">(</span><span class="n">my_cert</span><span class="p">,</span> <span class="n">my_key</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&quot;Response: </span><span class="si">%s</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># print json.dumps(data, indent=4)</span>
</span><span class='line'>        <span class="c"># Print namespace</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;ID: </span><span class="si">%s</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">])</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">test_namespace</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Unit testing</h3>

<p>You can do unit testing by using <code>requests-mock</code> package.</p>

<figure class='code'><figcaption><span>Installation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Only required for Python 2. Mock is part of Python 3.
</span><span class='line'>pip install -U mock
</span><span class='line'>
</span><span class='line'>pip install requests-mock</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Example of mocking</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@requests_mock.mock</span><span class="p">()</span>
</span><span class='line'><span class="k">def</span> <span class="nf">test_get_env_status</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">m</span><span class="p">):</span>
</span><span class='line'>    <span class="c">#Test status code 400 returns False</span>
</span><span class='line'>    <span class="n">m</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">status_endpoint</span><span class="p">,</span> <span class="n">status_code</span><span class="o">=</span><span class="mi">404</span><span class="p">)</span>
</span><span class='line'>    <span class="k">with</span> <span class="n">mock</span><span class="o">.</span><span class="n">patch</span><span class="o">.</span><span class="n">dict</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">,{</span><span class="s">&#39;username&#39;</span><span class="p">:</span><span class="s">&#39;mytempuser&#39;</span><span class="p">,</span> <span class="s">&#39;password&#39;</span><span class="p">:</span><span class="s">&#39;temppass&#39;</span><span class="p">}):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="n">FlowSnakeEnvironment</span><span class="o">.</span><span class="n">get_env_status</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">fsenv_name</span><span class="p">),</span> <span class="bp">None</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>References</h4>

<ul>
<li><a href="https://media.readthedocs.org/pdf/requests-mock/latest/requests-mock.pdf">PDF doc</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: BFS and DFS]]></title>
    <link href="http://tdongsi.github.io/python/blog/2016/09/17/tutorial-bfs-and-dfs/"/>
    <updated>2016-09-17T15:47:11-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2016/09/17/tutorial-bfs-and-dfs</id>
    <content type="html"><![CDATA[<p><a href="http://eddmann.com/posts/depth-first-search-and-breadth-first-search-in-python/">http://eddmann.com/posts/depth-first-search-and-breadth-first-search-in-python/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Protocols]]></title>
    <link href="http://tdongsi.github.io/python/blog/2016/09/05/tutorial-protocols/"/>
    <updated>2016-09-05T23:50:24-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2016/09/05/tutorial-protocols</id>
    <content type="html"><![CDATA[<p>Python uses &ldquo;duck typing&rdquo;.
It does not have interfaces like Java to enforce certain behaviors:
<code>Iterable</code> iterface means that you can iterate an object of that class in a <code>for each</code> loop.
In Python, to do that, you have to override magic functions like <code>__iter__</code> to achieve some behaviors.
Each behavior is called &ldquo;protocol&rdquo; in this post since some involves overriding multiple magic funtions.</p>

<!-- Reference:
Evernote: "OOP in Python"
-->




<!--more-->


<h3>Iterator</h3>

<p>Here, <code>__iter__</code> just returns self, an object that has the function next(), which (when called) either returns a value or raises a StopIteration exception.
We’ve actually already met several iterators in disguise; in particular, <code>enumerate</code> is an iterator.
To drive home the point, here’s a simple reimplementation of <code>enumerate</code>:</p>

<figure class='code'><figcaption><span>Implement enumerator() as iterator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">my_enumerate</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>   <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">some_iter</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>      <span class="bp">self</span><span class="o">.</span><span class="n">some_iter</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">some_iter</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>      <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">...</span>   <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>      <span class="k">return</span> <span class="bp">self</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">...</span>   <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>      <span class="n">val</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">some_iter</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'><span class="o">...</span>      <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="o">...</span>      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span><span class="p">,</span> <span class="n">val</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">my_enumerate</span><span class="p">([</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">]):</span>
</span><span class='line'><span class="o">...</span>   <span class="k">print</span> <span class="n">n</span><span class="p">,</span> <span class="n">val</span>
</span><span class='line'><span class="mi">0</span> <span class="n">a</span>
</span><span class='line'><span class="mi">1</span> <span class="n">b</span>
</span><span class='line'><span class="mi">2</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Generator and Iterator protocol</h4>

<p>It is also much easier to write routines like enumerate as a generator than as an iterator:</p>

<figure class='code'><figcaption><span>Implement enumerate() using generator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">gen_enumerate</span><span class="p">(</span><span class="n">some_iter</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>   <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="o">...</span>   <span class="k">for</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">some_iter</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>      <span class="k">yield</span> <span class="n">count</span><span class="p">,</span> <span class="n">val</span>
</span><span class='line'><span class="o">...</span>      <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>But you can do things with generators that you couldn’t do with finite lists.
Consider two full implementation of Eratosthenes’ Sieve for finding prime numbers.
Full discussion is <a href="http://intermediate-and-advanced-software-carpentry.readthedocs.io/en/latest/idiomatic-python.html">here</a>.
Most of these are from &ldquo;Python tutorial&rdquo;.</p>

<h3>Container</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Basic Algorithms]]></title>
    <link href="http://tdongsi.github.io/python/blog/2016/09/02/tutorial-basic-algorithms/"/>
    <updated>2016-09-02T01:04:37-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2016/09/02/tutorial-basic-algorithms</id>
    <content type="html"><![CDATA[<p>For sorting algorithms, see <a href="http://tdongsi.github.io/python/blog/2016/08/30/tutorial-sorting-algorithms/">this post</a>.</p>

<!--more-->


<h3>Binary search</h3>

<figure class='code'><figcaption><span>Binary search</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">binary_search</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Binary search</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param mlist: sorted list in ascending order</span>
</span><span class='line'><span class="sd">    :param item:</span>
</span><span class='line'><span class="sd">    :return: index of item in list. -1 if not found.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_bin_search</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">start</span> <span class="o">==</span> <span class="n">end</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># empty</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">start</span> <span class="o">==</span> <span class="n">end</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># singleton</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">mlist</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">==</span> <span class="n">item</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">start</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">med</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span><span class="o">+</span><span class="n">end</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">mlist</span><span class="p">[</span><span class="n">med</span><span class="p">]</span> <span class="o">==</span> <span class="n">item</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">med</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mlist</span><span class="p">[</span><span class="n">med</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">item</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">_bin_search</span><span class="p">(</span><span class="n">med</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">_bin_search</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">med</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_bin_search</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more advanced binary operations, check <code>bisect</code> module.
Using <code>bisect</code> module for binary search will be awkward and not recommended in an interview.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: More About Quick Sort]]></title>
    <link href="http://tdongsi.github.io/python/blog/2016/08/31/tutorial-more-about-quick-sort/"/>
    <updated>2016-08-31T21:48:49-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2016/08/31/tutorial-more-about-quick-sort</id>
    <content type="html"><![CDATA[<p>This post discuses more about partition algorithms used in Quick Sort and its runtime.
Partition algorithms are also used to efficiently find certain groups of the list, also known as &ldquo;Quick Select&rdquo;.</p>

<!-- more -->


<h3>Discussion of Quick-sort runtime</h3>

<p>The Quick-sort algorithm has a very serious weakness: O(n<sup>2</sup>) runtime in the worst-case scenarios.
Because of this weakness, it should not used in any large-scale applications with arbitrary inputs.
This section discusses when those worst-case scenarios happen and how we can limit the chance of those scenarios.
Before going into details, it should be noted that worst-case scenarios cannot be avoided, and those scenarios depend on the partition strategy that Quick-sort uses.
To find the worst-case scenarios for a partition strategy, find a class of inputs such that after each partition, only one item is moved to either side of the pivot.</p>

<p>In the standard two-way partition strategy (&ldquo;&lt; pivot&rdquo; and &ldquo;>= pivot&rdquo;) shown in <a href="http://tdongsi.github.io/python/blog/2016/08/30/tutorial-sorting-algorithms/">this post</a>, it has the O(n<sup>2</sup>) runtime when the input list is sorted (Quiz: in which direction?).
One simple way to work around that problem is to shuffle the input list (by swapping random elements).
Shuffling the list can be done in O(n) time and should has no effect to overall O(nlogn) sorting runtime.</p>

<p>However, even with shuffling, the worst-case scenario happens when the input list has many repeated items.
One way to work around that is to three-way partition as shown below, only proceed with the &ldquo;&lt;&rdquo; and &ldquo;>&rdquo; partitions, and ignoring &ldquo;=&rdquo; partition.
This Quick-sort partition is usually the one used in most libraries and typically very fast in practice.</p>

<h4>Three-way partitions</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">partition3</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; In-place three-way partition of the list will return [&lt; pivot] [== pivot] [&gt; pivot].</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    The two-way partition ([&lt; pivot] [&gt;= pivot]) seen in previous quicksort has the following degenerate cases:</span>
</span><span class='line'><span class="sd">     1. Almost sorted lists. -&gt; Defense: Use random swaps to scramble the lists before sorting.</span>
</span><span class='line'><span class="sd">     2. Almost equal items. -&gt; Defense: Use this three-way partition strategy.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">swap</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class='line'>        <span class="n">mlist</span><span class="p">[</span><span class="n">a</span><span class="p">],</span> <span class="n">mlist</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="n">mlist</span><span class="p">[</span><span class="n">b</span><span class="p">],</span> <span class="n">mlist</span><span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pidx</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="n">lo</span><span class="p">,</span> <span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">swap</span><span class="p">(</span><span class="n">pidx</span><span class="p">,</span> <span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pivot</span> <span class="o">=</span> <span class="n">mlist</span><span class="p">[</span><span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">idx1</span> <span class="o">=</span> <span class="n">lo</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">lo</span><span class="p">,</span> <span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">mlist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">pivot</span><span class="p">:</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">idx1</span><span class="p">)</span>
</span><span class='line'>            <span class="n">idx1</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">idx2</span> <span class="o">=</span> <span class="n">idx1</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">idx1</span><span class="p">,</span> <span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">mlist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">pivot</span><span class="p">:</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">idx2</span><span class="p">)</span>
</span><span class='line'>            <span class="n">idx2</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">swap</span><span class="p">(</span><span class="n">idx2</span><span class="p">,</span> <span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">idx1</span><span class="p">,</span> <span class="n">idx2</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">quicksort3</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">lo</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">hi</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Quick-sort using three-way partition strategy.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">mlist</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mlist</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">hi</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">hi</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">lo</span> <span class="o">==</span> <span class="n">hi</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># empty list</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mlist</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">lo</span> <span class="o">==</span> <span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># singleton list</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mlist</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">p</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">partition3</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="p">)</span>
</span><span class='line'>        <span class="n">quicksort3</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'>        <span class="n">quicksort3</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">q</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">hi</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mlist</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few lessons for learning/interview before arriving at this final version:</p>

<ul>
<li>Separate to two same-level functions <code>quicksort3</code> and helper <code>partition3</code> for easy reading.
Do NOT put <code>partition3</code> as a function inside <code>quicksort3</code>.
It is hard to read on the whiteboard with inconsistent spacing.</li>
<li>Define one-liner <code>swap</code> inside <code>parition3</code> and use it.
It will make to code much easier to read.</li>
<li>Find random pivot: do not settle for <code>mlist[hi-1]</code> pivot.
The interviewers WILL ask anyway.</li>
<li>Use <code>idx1, idx2</code> as variables instead of <code>p, q</code> since it&rsquo;s so easy to mix up <code>p</code> and <code>q</code> in interview context.</li>
</ul>


<h3>Quick Select</h3>

<p>Sometimes, interview questions will involve &ldquo;order statistics&rdquo;, such as finding k-th smallest element in an array.
To do this, you select a random pivot and partition the array as you would in the Quicksort algorithm.
Then, based on the index of the pivot element, you know which half of the array contains the desired element.
For example: k=10 and n=20, if the first half contains 5 elements, then you should ignore the first half, and recursively process the second half with k=4 and n=14.
The runtime of this algorithm is O(n), not O(n log n), since the recursive call is only on one half of the array.</p>

<h4>Find median</h4>

<p>Find median is a special case of finding k-th smallest item.
You still have to implement finding k-th smallest helper function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">find_median</span><span class="p">(</span><span class="n">mlist</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Find the median of a given list of numbers.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">partition</span><span class="p">(</span><span class="n">alist</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="p">):</span>
</span><span class='line'>        <span class="n">pivot</span> <span class="o">=</span> <span class="n">alist</span><span class="p">[</span><span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="n">idx</span> <span class="o">=</span> <span class="n">lo</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">alist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">pivot</span><span class="p">:</span>
</span><span class='line'>                <span class="n">alist</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">alist</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">alist</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">alist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>                <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="c"># move the pivot</span>
</span><span class='line'>        <span class="n">alist</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">alist</span><span class="p">[</span><span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">alist</span><span class="p">[</span><span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">alist</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">idx</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">find_kth</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">lo</span> <span class="o">==</span> <span class="n">hi</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># empty list</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">lo</span> <span class="o">==</span> <span class="n">hi</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># singleton list</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">mlist</span><span class="p">[</span><span class="n">lo</span><span class="p">]</span> <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="n">lo</span> <span class="k">else</span> <span class="bp">None</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">p</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">p</span> <span class="o">==</span> <span class="n">k</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">mlist</span><span class="p">[</span><span class="n">p</span><span class="p">]</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">find_kth</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">hi</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">find_kth</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">length</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># if odd length</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">find_kth</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">length</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># if length is even</span>
</span><span class='line'>        <span class="n">first</span> <span class="o">=</span> <span class="n">find_kth</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">length</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>        <span class="n">second</span> <span class="o">=</span> <span class="n">find_kth</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">length</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">first</span><span class="o">+</span><span class="n">second</span><span class="p">)</span><span class="o">/</span><span class="mf">2.0</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Sorting Algorithms]]></title>
    <link href="http://tdongsi.github.io/python/blog/2016/08/30/tutorial-sorting-algorithms/"/>
    <updated>2016-08-30T21:23:48-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2016/08/30/tutorial-sorting-algorithms</id>
    <content type="html"><![CDATA[<p>Quick overview and implementations of the most common sorting algorithms.</p>

<p>Most updated implementations are in <a href="https://github.com/tdongsi/python/blob/master/CodeJam/practice/y2016/basic.py">this Python module</a>.</p>

<!-- more -->


<h3>Sorting algorithms</h3>

<h4>Overview of space/time complexity</h4>

<table>
<thead>
<tr>
<th> </th>
<th> Time Complexity (Avg/Worst) </th>
<th> Space Complexity </th>
<th> In-place/Stable? </th>
<th> Notes </th>
</tr>
</thead>
<tbody>
<tr>
<td> <strong>Heapsort</strong> </td>
<td>  O(n * log n) / O(n * log n) </td>
<td> O(1) </td>
<td> Yes/No </td>
<td> NA </td>
</tr>
<tr>
<td> <strong>Mergesort</strong> </td>
<td> O(n * log n) / O(n * log n).</td>
<td> O(n) </td>
<td> No/Yes </td>
<td> Space O(1) for doubly-linked list. </td>
</tr>
<tr>
<td> <strong>Quicksort</strong> </td>
<td> O(n * log n) / O(n * n) </td>
<td> O(1) </td>
<td> Yes/No </td>
<td> It is stable for linked-list. </td>
</tr>
<tr>
<td> <strong>Insertion sort</strong> </td>
<td> O(n * n) / O(n * n) </td>
<td> O(1) </td>
<td> Yes/Yes </td>
<td> Adaptive: quick for largely sorted list. Online. Efficient for small lists. </td>
</tr>
<tr>
<td> <strong>Selection sort</strong> </td>
<td> O(n * n) / O(n * n) </td>
<td> O(1) </td>
<td> Yes/No </td>
<td> Adaptive: similar to Insertion Sort. More comparisons. Less write operations. </td>
</tr>
<tr>
<td> <strong>Counting sort</strong> </td>
<td> O(n + k) / O(n + k) </td>
<td> O(1) </td>
<td> ?/? </td>
<td>  Not comparison-sort. For small range. </td>
</tr>
<tr>
<td> <strong>Radix sort</strong> </td>
<td> O(w * n) / O(w * n) </td>
<td> O(1) </td>
<td> Yes/Yes (some variants) </td>
<td>  Not comparison-sort. <em>w -> log n</em> for arbitrary range. </td>
</tr>
</tbody>
</table>


<p><br></p>

<p>Note that <strong>insertion sort</strong> still has its place even though it is not a <code>O(n * log n)</code> algorithm.
It is shown in practice that &ldquo;insertion sort&rdquo; is faster than other sorting algorithms for sufficiently small, mostly sorted lists.
A common application of &ldquo;insertion sort&rdquo; is in <strong>merge sort</strong> implementations where
&ldquo;merge sort&rdquo; calls its own internal &ldquo;insertion sort&rdquo; to sort small enough sub-lists before merging (instead of keeping recursing to singleton lists).</p>

<p><strong>Selection sort</strong> seems inferior to <strong>insertion sort</strong> as an O(n<sup>2</sup>) sorting algorithm in most cases.
However, selection sort will perform identically regardless of the order of the array (almost sorted or unsorted), which can be a plus in real-time application.
While selection sort is preferable to insertion sort in terms of number of writes (Θ(n) swaps versus Ο(n2) swaps), <strong>cycle sort</strong> is the most optimal in &ldquo;number of write&rdquo; metric (write can be expensive in some situations).</p>

<h4>How to approach sorting questions</h4>

<p>Simply using quick-sort for any sorting in algorithmic questions could fail you, since it shows inexperience.
Asking clarifying questions is key: sorting a very large list of integers can have different approach, depending on its input size, data structure, numeric range and distribution.</p>

<ul>
<li>Small range: O(n) with array-based map.</li>
<li>Medium range: O(wn) with radix sort.</li>
<li>Arbitrary number: O(n log n)</li>
</ul>


<p><strong>Example</strong>: &ldquo;Design an algorithm to sort a list&rdquo;.</p>

<ul>
<li>What kind of list? Array list or linked list? Array list.</li>
<li>What data in it? Numbers or characters or strings? Numbers.</li>
<li>Are numbers integers? Yes.</li>
<li>What range of numbers? Are they IDs or values of something? Ages of customers.</li>
<li>How many numbers? One million.</li>
</ul>


<p>Based on the answers above, the best solution is to use an array of size 200 to keep count of customers for a given age.
Size 200 is chosen because the oldest person is less than 200 years old.
You can see that the space and time complexity is much different from Merge-Sort when you know characteristics of input data.</p>

<h3>Merge Sort</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="n">mlist</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span>
</span><span class='line'>        <span class="n">alist</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">l_idx</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">r_idx</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="n">l_idx</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">left</span><span class="p">)</span> <span class="ow">and</span> <span class="n">r_idx</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">right</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">left</span><span class="p">[</span><span class="n">l_idx</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">[</span><span class="n">r_idx</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">alist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">left</span><span class="p">[</span><span class="n">l_idx</span><span class="p">])</span>
</span><span class='line'>                <span class="n">l_idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">alist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">right</span><span class="p">[</span><span class="n">r_idx</span><span class="p">])</span>
</span><span class='line'>                <span class="n">r_idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># append the rest</span>
</span><span class='line'>        <span class="n">alist</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">left</span><span class="p">[</span><span class="n">l_idx</span><span class="p">:])</span>
</span><span class='line'>        <span class="n">alist</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">right</span><span class="p">[</span><span class="n">r_idx</span><span class="p">:])</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">alist</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mlist</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">med</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class='line'>        <span class="n">left</span> <span class="o">=</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">mlist</span><span class="p">[:</span><span class="n">med</span><span class="p">])</span>
</span><span class='line'>        <span class="n">right</span> <span class="o">=</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">mlist</span><span class="p">[</span><span class="n">med</span><span class="p">:])</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Quick Sort</h3>

<p>One important characteristic of Quick Sort is in-place.
Naive implementation tends to ignore this, focusing on its divide-and-conquer strategy.
The standard implementation is as follows, but see <a href="http://tdongsi.github.io/python/blog/2016/08/31/tutorial-more-about-quick-sort/">this post</a> for more details.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">quicksort</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">lo</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">hi</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">partition</span><span class="p">(</span><span class="n">alist</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="p">):</span>
</span><span class='line'>        <span class="n">pivot</span> <span class="o">=</span> <span class="n">alist</span><span class="p">[</span><span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="n">idx</span> <span class="o">=</span> <span class="n">lo</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">alist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">pivot</span><span class="p">:</span>
</span><span class='line'>                <span class="n">alist</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">alist</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">alist</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">alist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>                <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="c"># move the pivot</span>
</span><span class='line'>        <span class="n">alist</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">alist</span><span class="p">[</span><span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">alist</span><span class="p">[</span><span class="n">hi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">alist</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">idx</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">hi</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">hi</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">lo</span> <span class="o">==</span> <span class="n">hi</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># empty list</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mlist</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">lo</span> <span class="o">==</span> <span class="n">hi</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># singleton list</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mlist</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="p">)</span>
</span><span class='line'>        <span class="n">quicksort</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'>        <span class="n">quicksort</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">hi</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mlist</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Heap Sort</h3>

<p>Straight from <code>heapq</code> module&rsquo;s documentation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">heap_sort</span><span class="p">(</span><span class="n">mlist</span><span class="p">):</span>
</span><span class='line'>    <span class="n">heapq</span><span class="o">.</span><span class="n">heapify</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">heapq</span><span class="o">.</span><span class="n">heappop</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">))]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Insertion Sort</h3>

<figure class='code'><figcaption><span>Insertion sort</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">insertion_sort</span><span class="p">(</span><span class="n">mlist</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mlist</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)):</span>
</span><span class='line'>        <span class="n">pos</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>        <span class="n">cur</span> <span class="o">=</span> <span class="n">mlist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="n">pos</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">cur</span> <span class="o">&lt;</span> <span class="n">mlist</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>            <span class="n">mlist</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">mlist</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="n">pos</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">mlist</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">cur</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">mlist</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Selection sort</h3>

<figure class='code'><figcaption><span>Selection sort</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">selection_sort</span><span class="p">(</span><span class="n">mlist</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="n">iMin</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">mlist</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">mlist</span><span class="p">[</span><span class="n">iMin</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">iMin</span> <span class="o">=</span> <span class="n">j</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">iMin</span> <span class="o">!=</span> <span class="n">i</span><span class="p">:</span>
</span><span class='line'>            <span class="n">mlist</span><span class="p">[</span><span class="n">iMin</span><span class="p">],</span> <span class="n">mlist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">mlist</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">mlist</span><span class="p">[</span><span class="n">iMin</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">mlist</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Counting Sort</h3>

<p>Based on <a href="https://www.youtube.com/watch?v=Nz1KZXbghj8&amp;t=1925s">this lecture</a>.</p>

<figure class='code'><figcaption><span>Counting Sort</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">counting_sort</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Counting sort</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param mlist: List of items.</span>
</span><span class='line'><span class="sd">    :param k: Maximum range of key [0,k)</span>
</span><span class='line'><span class="sd">    :param key: function to get key of item. (for radix sort)</span>
</span><span class='line'><span class="sd">    :return:</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">k</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">k</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">key</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">key</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">counter</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">k</span><span class="p">)]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">mlist</span><span class="p">)):</span>
</span><span class='line'>        <span class="n">counter</span><span class="p">[</span><span class="n">key</span><span class="p">(</span><span class="n">mlist</span><span class="p">[</span><span class="n">i</span><span class="p">])]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">mlist</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">output</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">k</span><span class="p">):</span>
</span><span class='line'>        <span class="n">output</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">counter</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">output</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Radix Sort</h3>

<p>Use <code>counting_sort</code> in the last section as the subroutine.
See <a href="https://www.youtube.com/watch?v=Nz1KZXbghj8&amp;t=1925s">here</a>.</p>

<figure class='code'><figcaption><span>Radix sort</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">radix_sort</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">w</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="n">RADIX</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Find the max length</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">w</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">temp</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span>
</span><span class='line'>        <span class="n">w</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">temp</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="n">w</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">temp</span> <span class="o">//=</span> <span class="n">RADIX</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">output</span> <span class="o">=</span> <span class="n">mlist</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">digit</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">w</span><span class="p">):</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">my_key</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">digit</span><span class="p">):</span>
</span><span class='line'>                <span class="n">num</span> <span class="o">//=</span> <span class="n">RADIX</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">num</span> <span class="o">%</span> <span class="n">RADIX</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">output</span> <span class="o">=</span> <span class="n">counting_sort</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">RADIX</span><span class="p">,</span> <span class="n">my_key</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># print(output)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">output</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Testing sorting algorithms</h3>

<p>Codes to verify your sorting algorithm.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">your_module.your_sort_impl</span> <span class="kn">as</span> <span class="nn">do_sort</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestSorting</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_sort</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># import sorting function as do_sort</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">20</span><span class="p">):</span>
</span><span class='line'>            <span class="c"># Do it 5 times</span>
</span><span class='line'>            <span class="n">expected</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
</span><span class='line'>                <span class="n">mlist</span> <span class="o">=</span> <span class="n">expected</span><span class="p">[:]</span>
</span><span class='line'>                <span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span>
</span><span class='line'>                <span class="c"># print mlist</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">do_sort</span><span class="p">(</span><span class="n">mlist</span><span class="p">),</span> <span class="n">expected</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_same_element</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">do_sort</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">]),</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">do_sort</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]),</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">do_sort</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]),</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">do_sort</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">]),</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">do_sort</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]),</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'>        <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 2 Quick Recap]]></title>
    <link href="http://tdongsi.github.io/python/blog/2016/07/02/python-quick-recap/"/>
    <updated>2016-07-02T00:23:27-07:00</updated>
    <id>http://tdongsi.github.io/python/blog/2016/07/02/python-quick-recap</id>
    <content type="html"><![CDATA[<p>What to review before a Python interview.
This blog post focuses on Python 2.7.
Python 3 should be discussed in another blog post.</p>

<!--more-->


<h3>Basic</h3>

<ol>
<li><a href="https://docs.python.org/2.7/tutorial/">Python tutorial</a>: especially <a href="https://docs.python.org/2.7/tutorial/classes.html">&ldquo;Classes&rdquo;</a> and two <a href="https://docs.python.org/2.7/tutorial/stdlib.html">&ldquo;Brief Tour of Standard Library&rdquo;</a> sections.</li>
<li><a href="https://pyformat.info/">String format</a> if you expect lots of string processing.</li>
<li><a href="http://tdongsi.github.io/python/blog/2016/09/05/tutorial-protocols/">Protocols</a>.</li>
</ol>


<h3>Python decorator</h3>

<p>Python decorator is a callable that takes a function as argument and returns a replacement function.</p>

<figure class='code'><figcaption><span>Example decorator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">outer</span><span class="p">(</span><span class="n">some_func</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">def</span> <span class="nf">inner</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>         <span class="k">print</span> <span class="s">&quot;before some_func&quot;</span>
</span><span class='line'><span class="o">...</span>         <span class="n">ret</span> <span class="o">=</span> <span class="n">some_func</span><span class="p">()</span> <span class="c"># 1</span>
</span><span class='line'><span class="o">...</span>         <span class="k">return</span> <span class="n">ret</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">inner</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">decorated</span> <span class="o">=</span> <span class="n">outer</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span> <span class="c"># 2</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">decorated</span><span class="p">()</span>
</span><span class='line'><span class="n">before</span> <span class="n">some_func</span>
</span><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python 2.4 provided support to wrap a function in a decorator by pre-pending the function definition with a decorator name and the @ symbol.</p>

<figure class='code'><figcaption><span>A generic decorator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">logger</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span> <span class="c">#1</span>
</span><span class='line'><span class="o">...</span>         <span class="k">print</span> <span class="s">&quot;Arguments were: </span><span class="si">%s</span><span class="s">, </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>         <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span> <span class="c">#2</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">inner</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nd">@logger</span>
</span><span class='line'><span class="o">...</span> <span class="k">def</span> <span class="nf">foo1</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that decorators implemented as functions above are stateless.
For stateful decorators (e.g., counter), they should be implemented as a class (see <a href="http://scottlobdell.me/2015/04/decorators-arguments-python/">here</a>).</p>

<h4>Reference</h4>

<p>RECOMMENDED:</p>

<ul>
<li><a href="http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/">Decorator tutorial</a></li>
<li><a href="http://scottlobdell.me/2015/04/decorators-arguments-python/">Decorator with arguments</a></li>
</ul>


<p>EXTRA READING:</p>

<ul>
<li><a href="https://github.com/yihtserns/groovy-decorator">Python-inspired decorator in Groovy</a></li>
<li><a href="https://wiki.python.org/moin/PythonDecoratorLibrary">Decorator library</a></li>
</ul>


<h3>Python generator</h3>
]]></content>
  </entry>
  
</feed>
